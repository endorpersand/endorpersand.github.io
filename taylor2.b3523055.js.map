{"mappings":"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","sources":["src/mvc/taylor2.ts","src/taylor2/display.ts"],"sourcesContent":["import { create, all } from \"mathjs\";\n\nconst math = create(all);\n\nlet x = math.parse(\"x\") as math.SymbolNode;\nlet y = math.parse(\"y\") as math.SymbolNode;\n\ntype TaylorComponents = [number | math.Fraction, number, number][];\ntype TaylorInformation = [number, number, TaylorComponents];\n\nfunction coeffs(n: number) {\n    // calculate the coefficients of (x + y)^n\n    return Array.from({length: n + 1}, (_, i) => math.combinations(n, i))\n}\n\n// def taylor(expr, a = 0, b = 0, h = x, k = y, n = 2):\n//     assert n >= 0\n\n//     approx = 0\n//     order = []\n\n//     for i in range(n + 1):\n//         if len(order) == 0:\n//             order = [expr]\n//         else:\n//             first_order = order[0]\n//             new_order = [diff(first_order, x)]\n//             new_order.extend(diff(e, y) for e in order)\n//             order = new_order\n        \n//         for j, [c, e] in enumerate(zip(all_coeffs(i), order)):\n//             h_term = h ** j if j != 0 else 1\n//             k_term = k ** (i - j) if (i - j) != 0 else 1\n\n//             approx += c * h_term * k_term * e.subs(x, a).subs(y, b) / math.factorial(i)\n        \n//     return approx\n\nfunction taylorComponents(expr: string, n = 2, a = 0, b = 0): TaylorInformation {\n\n    // compute taylor\n    let exprNode: math.MathNode = math.parse(expr);\n    let approxComponents: TaylorComponents = [] // coeff, x exp, y exp\n    let order: math.MathNode[] = []\n\n    for (let i = 0; i <= n; i++) {\n        if (order.length == 0) {\n            order.push(exprNode);\n        } else {\n            let first_order = order[0]\n            let new_order = [math.derivative(first_order, x)];\n            \n            for (let e of order) {\n                new_order.push(math.derivative(e, y));\n            }\n\n            order = new_order;\n        }\n\n        let cs = coeffs(i);\n        for (var j = 0; j <= i; j++) {\n            let c = cs[j];\n            let e = order[j].evaluate({x: a, y: b});\n            let f = math.factorial(i);\n\n            let ee = math.fraction(e);\n            let fullCoeff: number | math.Fraction = math.multiply(math.fraction(c, f), ee) as math.Fraction;\n            approxComponents.push([fullCoeff, i - j, j]);\n        }\n    }\n\n    return [a, b, approxComponents];\n}\n\nfunction stringify(v: number | math.Fraction) {\n    if (math.isInteger(v)) {\n        v = math.number(v) as number;\n    }\n    return math.format(v);\n}\n\nfunction displayTaylor(ti: TaylorInformation): string {\n    let [a, b, tc] = ti;\n    let taylorStringComponents = tc.map(([c, xe, ye]) => {\n        let segs: {h?: math.MathNode, k?: math.MathNode} = {};\n        if (c == 0) return \"0\";\n\n        segs.h = math.parse(`(x - ${a}) ^ ${xe}`);\n        segs.k = math.parse(`(y - ${b}) ^ ${ye}`);\n\n        let expr = math.simplify(\"h * k\", segs);\n\n        let es = expr.toString();\n        if (es === \"1\") {\n            return stringify(c);\n        } else {\n            let coeff;\n            if (c == 1) coeff = \"\";\n            else if (c == -1) coeff = \"-\";\n            else coeff = stringify(c) + \" * \";\n\n            if (expr.type === \"OperatorNode\" && (expr.op === \"+\" || expr.op === \"-\") && coeff !== \"\") {\n                return coeff + `(${es})`;\n            }\n            return coeff + es;\n        }\n    }).filter(x => x != \"0\");\n\n    if (taylorStringComponents.length == 0) return \"0\";\n\n    return taylorStringComponents.reduce((acc, cv) => {\n        let nextTermNeg = cv.startsWith(\"-\");\n\n        if (nextTermNeg) {\n            return `${acc} - ${cv.slice(1)}`;\n        } else {\n            return `${acc} + ${cv}`;\n        }\n    });\n}\n\nfunction taylor(expr: string, n = 2, a = 0, b = 0): string {\n    return displayTaylor(taylorComponents(expr, n, a, b));\n}\n\nexport default taylor;","import { create, all } from \"mathjs\";\nimport taylor from '../mvc/taylor2';\n\ndeclare var MathJax: any;\nconst math = create(all);\ntype MaybeTex = {\n    valid: false,\n    expr: string,\n} | {\n    valid: true,\n    expr: string,\n    tex: string\n};\n\nlet centerDiv = document.querySelector(\"#centerDiv\")!      as HTMLDivElement,\n    [centerX, centerY] = centerDiv.querySelectorAll(\"input\"),\n    funcInput = document.querySelector(\"#func input\")!     as HTMLInputElement,\n    funcTex = document.querySelector(\"#funcTex\")!          as HTMLDivElement,\n    resultTex = document.querySelector(\"#resultTex\")!      as HTMLDivElement,\n    approxNRadio = document.querySelector(\"#appn\")!        as HTMLInputElement,\n    approxNInput = document.querySelector(\"#appninput\")!   as HTMLInputElement,\n    computeButton = document.querySelector(\"#compute\")!    as HTMLButtonElement;\n\nlet tex: MaybeTex = {valid: false, expr: \"\"};\n\ncenterX.addEventListener(\"input\", grayResult);\ncenterY.addEventListener(\"input\", grayResult);\nfuncInput.addEventListener(\"input\", updateFuncTex);\ndocument.querySelectorAll(\"input[name=approx]\").forEach(i => i.addEventListener(\"change\", radioUpdate));\ncomputeButton.addEventListener(\"click\", updateResultTex);\nupdateFuncTex();\nupdateResultTex();\n\nfunction texHandler(node: math.MathNode, options?: object) {\n    if (node.type === \"OperatorNode\" && node.op === \"*\") {\n        let [x, y] = node.args;\n        return `${x.toTex(options)}${y.toTex(options)}`;\n    }\n}\nfunction verifyExpression(expr: string, replEq = \"=\", explicitMul = true): MaybeTex {\n    let fexpr = \"f(x, y) = \" + expr;\n    let tex;\n\n    let options = explicitMul ? {} : {handler: texHandler};\n\n    try {\n        tex = math.parse(fexpr).toTex(options).replace(\":=\", replEq);\n    } catch {\n        return {valid: false, expr}\n    }\n\n    return {valid: true, expr, tex};\n}\n\nfunction findN() {\n    let rads = [...document.querySelectorAll(\"input[name=approx]\")];\n    let v = (rads as HTMLInputElement[])\n        .filter(e => e.checked)\n        .map(e => e.value)[0];\n    \n    if (+v != 0) return +v;\n    return +approxNInput.value;\n}\n\nfunction grayResult() {\n    resultTex.classList.add(\"notCurrentFunc\");\n}\n\nfunction updateTex() {\n    if (\"typeset\" in MathJax) {\n        MathJax.typeset();\n    }\n}\n\nfunction updateFuncTex() {\n    tex = verifyExpression(funcInput.value);\n\n    if (tex.valid) {\n        funcTex.innerHTML = `$$${tex.tex}$$`;\n    } else {\n        funcTex.innerHTML = `$$\\\\color{red}{?}$$`\n    }\n\n    grayResult();\n    updateTex();\n}\n\nfunction updateResultTex() {\n    let succ = false;\n    if (tex.valid) {\n        let taytay: string = \"\";\n        resultTex.classList.remove(\"err\");\n        resultTex.classList.remove(\"notCurrentFunc\");\n        try {\n            taytay = taylor(tex.expr, findN(), +centerX.value, +centerY.value);\n        } catch (e) {\n            console.log(e);\n            if (e instanceof Error && e.message.startsWith(\"Undefined \")) {\n                let msg = e.message;\n                let sym = msg.slice(\"Undefined symbol \".length); // can also be \"Undefined function\", but not that big of a deal\n                if (sym.includes(\"x\") || sym.includes(\"y\")) {\n                    msg += \" (try adding * here?)\"\n                }\n                resultTex.innerHTML = msg;\n                resultTex.classList.add(\"err\");\n                return;\n            }\n        }\n        let rTex = verifyExpression(taytay, \"\\\\approx\", false);\n        if (rTex.valid) {\n            resultTex.innerHTML = `$$${rTex.tex}$$`;\n            succ = true;\n        }\n    }\n    if (!succ) {\n        resultTex.innerHTML = `$$\\\\color{red}{?}$$`\n    }\n    updateTex();\n}\n\nfunction radioUpdate() {\n    approxNInput.disabled = !approxNRadio.checked;\n    grayResult();\n}"],"names":["$c116c3540bbc3345$var$math","create","$gm66E","all","$c116c3540bbc3345$var$x","parse","$c116c3540bbc3345$var$y","$c116c3540bbc3345$var$coeffs","n","Array","from","length","_","i","combinations","$c116c3540bbc3345$var$taylorComponents","expr","arguments","a","b","exprNode","approxComponents","order","push","first_order","new_order","derivative","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","e","value","err","return","cs","j","c","e1","evaluate","x","y","f","factorial","ee","fraction","fullCoeff","multiply","$c116c3540bbc3345$var$stringify","v","isInteger","number","format","$c116c3540bbc3345$var$displayTaylor","ti","_ti","$iFC9j","slicedToArray","taylorStringComponents","map","param","_param","xe","ye","segs","h","concat","k","coeff","simplify","es","toString","type","op","filter","reduce","acc","cv","startsWith","slice","$c116c3540bbc3345$export$2e2bcd8739ae039","$59defca8dabda35a$var$math","$59defca8dabda35a$var$centerDiv","document","querySelector","ref","querySelectorAll","$59defca8dabda35a$var$centerX","$59defca8dabda35a$var$centerY","$59defca8dabda35a$var$funcInput","$59defca8dabda35a$var$funcTex","$59defca8dabda35a$var$resultTex","$59defca8dabda35a$var$approxNRadio","$59defca8dabda35a$var$approxNInput","$59defca8dabda35a$var$computeButton","$59defca8dabda35a$var$tex","valid","$59defca8dabda35a$var$texHandler","node","options","_args","args","toTex","$59defca8dabda35a$var$verifyExpression","tex","replEq","explicitMul","fexpr","handler","replace","$59defca8dabda35a$var$grayResult","classList","add","$59defca8dabda35a$var$updateTex","MathJax","typeset","$59defca8dabda35a$var$updateFuncTex","innerHTML","$59defca8dabda35a$var$updateResultTex","succ","taytay","remove","toConsumableArray","checked","console","log","Error","message","msg","sym","includes","rTex","$59defca8dabda35a$var$radioUpdate","disabled","addEventListener","forEach"],"version":3,"file":"taylor2.b3523055.js.map"}