{"mappings":"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","sources":["src/complexgrapher/worker/chunkloader.ts"],"sourcesContent":["import { create, all } from \"mathjs\";\nimport { Complex, CanvasData, ChunkData, PartialEvaluator, Evaluator, LoaderIn, LoaderOut } from \"../types\";\nconst math = create(all);\n\nonmessage = function (e) {\n    let {pev, cd, chunk}: LoaderIn = e.data;\n    let ev = buildEvaluator(pev);\n    let buf = computeBuffer(ev, cd, chunk);\n\n    let msg: LoaderOut = {buf, chunk};\n    postMessage(msg, [buf] as any);\n}\n\nfunction buildEvaluator(pev: PartialEvaluator): Evaluator {\n    let {fstr, inverse} = pev;\n    return {f: math.evaluate(fstr), inverse}\n}\n\nfunction computeBuffer(ev: Evaluator, cd: CanvasData, chunk: ChunkData): ArrayBuffer {\n    let {f, inverse} = ev;\n    let {width, height} = chunk;\n\n    let buf = new ArrayBuffer(4 * width * height);\n    let arr32 = new Uint32Array(buf);\n    for (var i = 0; i < width; i++) {\n        for (var j = 0; j < height; j++) {\n            let k = width * j + i;\n            // compute value\n            let fz = forceComplex(f( convPlanes(i, j, cd, chunk) ));\n            // if (typeof fz !== 'number' && fz.type !== 'Complex') throw new TypeError('Input value is not a number');\n            \n            // get color\n            if (!Number.isFinite(fz.re) || !Number.isFinite(fz.im)) {\n                let infColor = +!inverse * 0xFFFFFF;\n                arr32[k] = (0xFF << 24) | infColor;\n                continue;\n            }\n\n            let { r, phi } = fz.toPolar();\n            arr32[k] = polarToColor(r, phi, inverse);\n        }\n    }\n    return buf;\n}\n\nfunction convPlanes(x: number, y: number, cd: CanvasData, chunk: ChunkData) {\n    //converts xy pixel plane to complex plane\n\n    // let cmx =  (row - rx) / (rx / 2) / scale,\n    //     cmy = -(col - ry) / (ry / 2) / scale;\n\n    // row - rx: distance from center, in canvas pixels\n    // / (rx / 2): normalizes that so the edge is 2\n    // / scale: scale mult.\n\n    let {width, height, scale} = cd;\n    let {offx, offy} = chunk;\n    let [rx, ry] = [(width - 1) / 2, (height - 1) / 2];\n    let cmx =  (x + offx - rx) / (rx / 2) / scale,\n        cmy = -(y + offy - ry) / (ry / 2) / scale;\n    return math.complex(cmx, cmy) as unknown as Complex;\n}\n\nfunction forceComplex(z: number | Complex) {\n    // z as any is ok here\n    return math.complex(z as any);\n}\n\nfunction polarToColor(rad: number, theta: number, inverse: boolean) {\n    let hue, brightness, c, x, m, r, g, b;\n    hue = mod(theta * 3 / Math.PI, 6); // hue [0,6)\n    if (inverse) hue = 6 - hue;\n\n    brightness = bfunc(rad, inverse);\n    c = 1 - Math.abs(2 * brightness - 1);\n    x = c * (1 - Math.abs(mod(hue, 2) - 1));\n    m = brightness - c / 2;\n    if (0 <= hue && hue < 1) [r, g, b] = [c, x, 0];\n    else if (1 <= hue && hue < 2) [r, g, b] = [x, c, 0];\n    else if (2 <= hue && hue < 3) [r, g, b] = [0, c, x];\n    else if (3 <= hue && hue < 4) [r, g, b] = [0, x, c];\n    else if (4 <= hue && hue < 5) [r, g, b] = [x, 0, c];\n    else if (5 <= hue && hue < 6) [r, g, b] = [c, 0, x];\n    else [r, g, b] = [c, x, 0]; // should never happen?\n\n    return (    0xFF  << 24) | \n    (((b + m) * 0xFF) << 16) |\n    (((g + m) * 0xFF) <<  8) |\n     ((r + m) * 0xFF);\n}\n\nfunction bfunc(r: number, inv: boolean) {\n    // bfunc needs to match the identities:\n    // b(1/x) = 1 - b(x)\n    // b(0) = 0\n\n    // the current impl uses b(x) = 1 - 1/(x^n + 1)\n    // another possible impl: b(x) = 2 * atan(x) / pi\n\n    let b = 1 / (Math.sqrt(r) + 1);\n\n    return inv ? b : 1 - b;\n}\n\nfunction mod(x: number, y: number) {\n    return ((x % y) + y) % y;\n}"],"names":["$6neD6","parcelRequire","$d0e4415cf369ec6a$var$math","create","all","$d0e4415cf369ec6a$var$convPlanes","x","y","cd","chunk","width","height","scale","offx","offy","ref","rx","ry","cmx","cmy","complex","$d0e4415cf369ec6a$var$forceComplex","z","$d0e4415cf369ec6a$var$polarToColor","rad","theta","inverse","hue","brightness","c","m","r","g","b","$d0e4415cf369ec6a$var$mod","Math","PI","inv","sqrt","$d0e4415cf369ec6a$var$bfunc","abs","ref1","ref2","ref3","ref4","ref5","ref6","onmessage","e","_data","data","pev","ev","fstr","f","evaluate","$d0e4415cf369ec6a$var$buildEvaluator","buf","ArrayBuffer","arr32","Uint32Array","i","j","k","fz","Number","isFinite","re","im","toPolar","phi","infColor","$d0e4415cf369ec6a$var$computeBuffer","postMessage"],"version":3,"file":"chunkloader.914ead69.js.map"}