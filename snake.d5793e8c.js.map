{"mappings":"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","sources":["src/snake/snake.ts"],"sourcesContent":["const canvas = document.querySelector('#canvas')! as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d')!;\n\nlet s = 25; // 1 game pixel = s canvas pixels\n\ntype GameCoord = [number, number];\ntype CanvasCoord = [number, number];\nlet [gMaxWidth, gMaxHeight] = toG([canvas.width, canvas.height]);\nlet snake: GameCoord[] = [[Math.floor(gMaxWidth / 4), Math.floor(gMaxHeight / 2)]]; // [head, ..., tail]\nlet facing = 'e'; //n, e, s, w\n\nlet apple: GameCoord;\n\n// CONFIG //\nconst pal = { // color palette\n    bg: '#222',\n    snake: '#0b0',\n    apple: '#d00',\n    death: '#fff',\n}\nsnake.length = 5; // initial snake length\nconst tpu = 75; // ticks per update\n\n\ndrawGRect([0,0], canvas.width, canvas.height, pal.bg, [0, 0]); // draw bg\ndrawGRect(snake[0], s - 2, s - 2, pal.snake); // draw snake\ndrawApple();\nlet int: number | undefined = setInterval(update, tpu);\n\ndocument.onkeydown = e => {\n    switch (e.code) {\n        case 'KeyW':\n        case 'ArrowUp':\n            if (facing != 's' && facing != 'n') {\n                facing = 'n';\n                update();\n            }\n            break;\n        case 'KeyA':\n        case 'ArrowLeft':\n            if (facing != 'e' && facing != 'w') {\n                facing = 'w';\n                update();\n            }\n            break;\n        case 'KeyS':\n        case 'ArrowDown':\n            if (facing != 's' && facing != 'n') {\n                facing = 's';\n                update();\n            }\n            break;\n        case 'KeyD':\n        case 'ArrowRight':\n            if (facing != 'e' && facing != 'w') {\n                facing = 'e';\n                update();\n            }\n            break;\n        case 'KeyR':\n            die()\n            break;\n    }\n};\n\ndocument.onblur = () => {\n    clearInterval(int);\n    int = undefined;\n}\n\ndocument.onfocus = () => {\n    int = int || setInterval(update, tpu);\n}\nfunction drawGRect(g: GameCoord, cw: number, ch: number, color: string, cshift = [1,1]) {\n    let c = toC(g).map((x, i) => x + cshift[i]) as CanvasCoord; // conv g coord and then shift point in c space\n    ctx.fillStyle = color;\n    ctx.fillRect(...c, cw, ch);\n}\n\nfunction drawSnakeSeg(g: GameCoord) {\n    /*\n     * if s = 4,\n     * ........\n     * .xx..xx.\n     * .xx..xx.\n     * ........\n     * o.......\n     * .xx..xx.\n     * .xx..xx.\n     * ........\n     *\n     *\n     *\n     */\n    switch (facing) {\n        case 'n':\n            drawGRect(g, s-2, s, pal.snake)//, [1, 1]);\n            break;    \n        case 'e':\n            drawGRect(g, s, s-2, pal.snake, [-1, 1])//, [-1, 1]);\n            break;\n        case 's':\n            drawGRect(g, s-2, s, pal.snake, [1, -1])//, [1, -1]);\n            break;\n        case 'w':\n            drawGRect(g, s, s-2, pal.snake)//, [1, 1]);\n            break;\n    }\n}\n\nfunction drawApple() {\n    do {\n        apple = [Math.floor(Math.random() * gMaxWidth), Math.floor(Math.random() * gMaxHeight)];\n    } while (snake.some(x => arrEq(x, apple)))\n    drawGRect(apple, s - 2, s - 2, pal.apple); // spawn apple\n}\n\nfunction update() {\n    let nextPos: GameCoord = [...snake[0]]; //clone head\n    switch (facing) {\n        case 'n':\n            nextPos[1]--;\n            break;\n        case 'e':\n            nextPos[0]++;\n            break;\n        case 's':\n            nextPos[1]++;\n            break;\n        case 'w':\n            nextPos[0]--;\n            break;\n    }\n    if(!arrEq(apple, nextPos)) {\n        // if next pos is not apple, delete tail\n        let stail = snake.pop()!;\n        drawGRect(stail, s + 2, s + 2, pal.bg, [-1, -1]);\n    }\n    if(arrEq(apple, nextPos)) drawApple(); // if next pos is apple, spawn a new apple\n    if(arrIncludes(snake, nextPos)) die(); // if next pos is snake, die\n    if (isOutBound(nextPos)) die(); // if next pos is void, die\n    //console.log(nextColor, appleData);\n    snake.unshift(nextPos);\n    drawSnakeSeg(nextPos);\n    document.querySelector('#score')!.textContent = `Score: ${snake.length}`;\n}\n\nfunction die() {\n    clearInterval(int);\n    ctx.fillStyle = pal.death;\n    ctx.font = `${canvas.width * 250 / 700}px 'Comic Sans MS', 'Papyrus', 'Impact', fantasy, cursive, sans-serif`;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText('F', canvas.width / 2, canvas.height / 2);\n\n    document.onkeydown = e => e.key == 'r' ? location.reload() : void 0;\n    document.onfocus = null;\n\n    let button = document.createElement('button');\n    button.textContent = 'Restart';\n    button.onclick = () => location.reload();\n    document.querySelector('#score')?.parentElement?.appendChild(button);\n}\n\nfunction toC(g: GameCoord | undefined): CanvasCoord {\n    // converts a game coord to canvas coord\n    return (g ?? [0, 0]).map(x => x * s) as CanvasCoord;\n}\nfunction toG(c: CanvasCoord | undefined): GameCoord {\n    // converts a canvas coord to game coord\n    return (c ?? [0, 0]).map(x => x / s) as GameCoord;\n}\nfunction isOutBound(g: GameCoord) {\n    // game bounds [0, gMaxWidth), [0, gMaxHeight)\n    return g[0] < 0 || g[0] >= gMaxWidth || g[1] < 0 || g[1] >= gMaxHeight;\n}\n\nfunction arrEq<T>(a1: T[], a2: T[]) {\n    return a1.every((x, i) => x == a2[i]);\n}\nfunction arrIncludes<T>(metarr: T[][], arr: T[]) {\n    return metarr.some(a => arrEq(a, arr));\n}\nexport {}"],"names":["$667448161c3cc3e8$var$canvas","document","querySelector","$667448161c3cc3e8$var$ctx","getContext","$667448161c3cc3e8$var$gMaxWidth","$667448161c3cc3e8$var$gMaxHeight","width","height","map","x","$667448161c3cc3e8$var$apple","$667448161c3cc3e8$var$snake","Math","floor","$667448161c3cc3e8$var$facing","$667448161c3cc3e8$var$pal","length","$667448161c3cc3e8$var$drawGRect","$667448161c3cc3e8$var$s","$667448161c3cc3e8$var$drawApple","$667448161c3cc3e8$var$int","setInterval","$667448161c3cc3e8$var$update","g","cw","ch","color","cshift","c","$667448161c3cc3e8$var$toC","i","fillStyle","fillRect","random","some","$667448161c3cc3e8$var$arrEq","nextPos","pop","arr","a","$667448161c3cc3e8$var$die","unshift","$667448161c3cc3e8$var$drawSnakeSeg","textContent","clearInterval","font","textAlign","textBaseline","fillText","onkeydown","e","key","location","reload","onfocus","button","createElement","onclick","parentElement","appendChild","a1","a2","every","code","onblur","undefined"],"version":3,"file":"snake.d5793e8c.js.map"}