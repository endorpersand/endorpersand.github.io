{"mappings":"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","sources":["src/index/boxes.ts"],"sourcesContent":["type Coord = [number, number];\ntype RGB = [number, number, number];\n\nlet wrapper = document.querySelector('.wrapper')!;\nlet squares = [...document.querySelectorAll('.wrapper a')] as HTMLElement[];\nlet cols = +getComputedStyle(wrapper).getPropertyValue('--cols');\n\nlet rows = 3; // add more placeholder project boxes by changing this\nif (squares.length > cols * rows) rows = Math.ceil(squares.length / cols);\n\nlet cornerPositions: Coord[] = [\n    [0, 0], \n    [0, cols - 1], \n    [rows - 1, 0], \n    [rows - 1, cols - 1]\n];\n\nfor (let i = squares.length; i < (cols * rows); i++) {\n    createPlaceholderSquare();\n}\n\nfor (let s of squares) {\n    let span = document.createElement('span');\n    span.classList.add('colhex');\n    s.appendChild(span);\n}\n\nregenColors();\n\nfunction createPlaceholderSquare() {\n    let a = document.createElement('a');\n    let title = document.createElement('div');\n    let desc = document.createElement('div');\n\n    title.classList.add('title');\n    desc.classList.add('desc');\n\n    a.appendChild(title);\n    a.appendChild(desc);\n    a.onclick = regenColors;\n\n    wrapper.appendChild(a);\n    squares.push(a);\n}\n\nfunction regenColors() {\n    let corners: [Coord, RGB][] = Array.from({length: 4}, (_, i) => [cornerPositions[i], randRGB(0x50)])\n\n    squares.forEach((s, i) => {\n        let pos = asCoord(i);\n        let clr: RGB = [0x77, 0x77, 0x77];\n\n        a: {\n            // if corner, use that color\n            for (let [cornerPos, cornerClr] of corners) {\n                if (manhattan(cornerPos, pos) == 0) {\n                    clr = cornerClr;\n                    break a;\n                }\n            }\n\n            // find all corners on the same row or col as pos\n            // if none, this must be an inner square, so all corners are part of its color calc\n            let calculatingCorners = corners.filter(c => {\n                let [[qx, qy], _] = c;\n                let [px, py] = pos;\n                \n                return px === qx || py === qy;\n            })\n            if (calculatingCorners.length === 0) calculatingCorners = corners;\n\n            // then find manhattan for each corner and interpolate\n            let clrs = calculatingCorners.map(([_, rgb]) => rgb);\n            let dist = calculatingCorners.map(([q, _]) => manhattan(pos, q));\n\n            clr = interpolate(clrs, dist);\n\n        }\n        s.style.backgroundColor = rgb(clr);\n\n        let hexText = s.querySelector('.colhex')!;\n        hexText.textContent = hex(clr);\n    });\n}\n\nfunction randInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nfunction randRGB(min = 0, max = 256): RGB {\n    // [min, max)\n    return Array.from({length: 3}, () => randInt(min, max)) as RGB;\n}\nfunction rgb(arr: RGB) {\n    // converts rgb array => rgb(#, #, #) notation in css\n    return `rgb(${arr.join(',')})`\n}\nfunction hex(arr: RGB) {\n    // converts rgb array => hex notation\n    return `#${arr.map(x => Math.round(x).toString(16)).join('')}`\n}\nfunction asCoord(i: number): Coord {\n    // takes an index in the array, maps it to its [row, col] value\n    return [Math.floor(i / cols), i % cols];\n}\nfunction manhattan(p1: Coord, p2: Coord) {\n    let [x1, y1] = p1,\n        [x2, y2] = p2;\n    return Math.abs(x1 - x2) + Math.abs(y1 - y2)\n}\nfunction interpolate(clrs: RGB[], dist: number[]) {\n    // does weighted RMS interpolation between two colors\n    let totalDist = dist.reduce((acc, cv) => acc + cv, 0);\n\n    let channels: number[] = [];\n    for (let c = 0; c < 3; c++) { // iterate through all channels (R, G, B)\n        let colorvals = clrs.map(rgb => rgb[c]) // get channel values\n        let sum = colorvals.map((x, i) => (x ** 2) * (totalDist - dist[i])) // square each channel value, multiply by weight\n                           .reduce((acc, cv) => acc + cv, 0); // sum\n        \n        let totalWeight = totalDist  * (colorvals.length - 1);\n        let normSum = Math.sqrt(sum / totalWeight);\n        channels.push(normSum);\n    }\n    return channels as RGB;\n}\n\nexport {}; // recognize as module"],"names":["$0b55116577e5af38$var$wrapper","document","querySelector","$0b55116577e5af38$var$squares","querySelectorAll","$0b55116577e5af38$var$cols","getComputedStyle","getPropertyValue","$0b55116577e5af38$var$rows","length","Math","ceil","$0b55116577e5af38$var$cornerPositions","i","$0b55116577e5af38$var$createPlaceholderSquare","s","span","createElement","classList","add","appendChild","a","title","desc","onclick","$0b55116577e5af38$var$regenColors","push","corners","Array","from","_","$0b55116577e5af38$var$randRGB","forEach","s1","i1","pos","i2","floor","clr","cornerPos","cornerClr","$0b55116577e5af38$var$manhattan","calculatingCorners","filter","c","qx","qy","px","py","clrs","dist","totalDist","reduce","acc","cv","channels","colorvals","map","rgb","sum","x","totalWeight","normSum","sqrt","$0b55116577e5af38$var$interpolate","q","style","backgroundColor","join","textContent","arr","round","toString","$0b55116577e5af38$var$hex","min","max","random","$0b55116577e5af38$var$randInt","p1","p2","x1","y1","x2","y2","abs"],"version":3,"file":"index.792a1724.js.map"}