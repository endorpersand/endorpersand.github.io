{"mappings":"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","sources":["node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_iterable_to_array.mjs","node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_array_like_to_array.mjs","node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_unsupported_iterable_to_array.mjs","node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_array_without_holes.mjs","node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_non_iterable_spread.mjs","node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_to_consumable_array.mjs","src/snake/snake.ts","node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_sliced_to_array.mjs","node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_array_with_holes.mjs","node_modules/.pnpm/@swc+helpers@0.4.2/node_modules/@swc/helpers/src/_non_iterable_rest.mjs"],"sourcesContent":["export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\n","import _arrayLikeToArray from './_array_like_to_array.mjs';\n\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))\n    return _arrayLikeToArray(o, minLen);\n}\n","import _arrayLikeToArray from './_array_like_to_array.mjs';\n\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n","import arrayWithoutHoles from './_array_without_holes.mjs';\nimport iterableToArray from './_iterable_to_array.mjs';\nimport nonIterableSpread from './_non_iterable_spread.mjs';\nimport unsupportedIterableToArray from './_unsupported_iterable_to_array.mjs';\n\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n","const canvas = document.querySelector('#canvas')! as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d')!;\n\nlet s = 25; // 1 game pixel = s canvas pixels\n\ntype GameCoord = [number, number];\ntype CanvasCoord = [number, number];\nlet [gMaxWidth, gMaxHeight] = toG([canvas.width, canvas.height]);\nlet snake: GameCoord[] = [[Math.floor(gMaxWidth / 4), Math.floor(gMaxHeight / 2)]]; // [head, ..., tail]\nlet facing = 'e'; //n, e, s, w\n\nlet apple: GameCoord;\n\n// CONFIG //\nconst pal = { // color palette\n    bg: '#222',\n    snake: '#0b0',\n    apple: '#d00',\n    death: '#fff',\n}\nsnake.length = 5; // initial snake length\nconst tpu = 75; // ticks per update\n\n\ndrawGRect([0,0], canvas.width, canvas.height, pal.bg, [0, 0]); // draw bg\ndrawGRect(snake[0], s - 2, s - 2, pal.snake); // draw snake\ndrawApple();\nlet int: NodeJS.Timer | undefined = setInterval(update, tpu);\n\ndocument.onkeydown = e => {\n    switch (e.code) {\n        case 'KeyW':\n        case 'ArrowUp':\n            if (facing != 's' && facing != 'n') {\n                facing = 'n';\n                update();\n            }\n            break;\n        case 'KeyA':\n        case 'ArrowLeft':\n            if (facing != 'e' && facing != 'w') {\n                facing = 'w';\n                update();\n            }\n            break;\n        case 'KeyS':\n        case 'ArrowDown':\n            if (facing != 's' && facing != 'n') {\n                facing = 's';\n                update();\n            }\n            break;\n        case 'KeyD':\n        case 'ArrowRight':\n            if (facing != 'e' && facing != 'w') {\n                facing = 'e';\n                update();\n            }\n            break;\n        case 'KeyR':\n            die()\n            break;\n    }\n};\n\ndocument.onblur = () => {\n    clearInterval(int);\n    int = undefined;\n}\n\ndocument.onfocus = () => {\n    int = int || setInterval(update, tpu);\n}\nfunction drawGRect(g: GameCoord, cw: number, ch: number, color: string, cshift = [1,1]) {\n    let c = toC(g).map((x, i) => x + cshift[i]) as CanvasCoord; // conv g coord and then shift point in c space\n    ctx.fillStyle = color;\n    ctx.fillRect(...c, cw, ch);\n}\n\nfunction drawSnakeSeg(g: GameCoord) {\n    /*\n     * if s = 4,\n     * ........\n     * .xx..xx.\n     * .xx..xx.\n     * ........\n     * o.......\n     * .xx..xx.\n     * .xx..xx.\n     * ........\n     *\n     *\n     *\n     */\n    switch (facing) {\n        case 'n':\n            drawGRect(g, s-2, s, pal.snake)//, [1, 1]);\n            break;    \n        case 'e':\n            drawGRect(g, s, s-2, pal.snake, [-1, 1])//, [-1, 1]);\n            break;\n        case 's':\n            drawGRect(g, s-2, s, pal.snake, [1, -1])//, [1, -1]);\n            break;\n        case 'w':\n            drawGRect(g, s, s-2, pal.snake)//, [1, 1]);\n            break;\n    }\n}\n\nfunction drawApple() {\n    do {\n        apple = [Math.floor(Math.random() * gMaxWidth), Math.floor(Math.random() * gMaxHeight)];\n    } while (snake.some(x => arrEq(x, apple)))\n    drawGRect(apple, s - 2, s - 2, pal.apple); // spawn apple\n}\n\nfunction update() {\n    let nextPos: GameCoord = [...snake[0]]; //clone head\n    switch (facing) {\n        case 'n':\n            nextPos[1]--;\n            break;\n        case 'e':\n            nextPos[0]++;\n            break;\n        case 's':\n            nextPos[1]++;\n            break;\n        case 'w':\n            nextPos[0]--;\n            break;\n    }\n    if(!arrEq(apple, nextPos)) {\n        // if next pos is not apple, delete tail\n        let stail = snake.pop()!;\n        drawGRect(stail, s + 2, s + 2, pal.bg, [-1, -1]);\n    }\n    if(arrEq(apple, nextPos)) drawApple(); // if next pos is apple, spawn a new apple\n    if(arrIncludes(snake, nextPos)) die(); // if next pos is snake, die\n    if (isOutBound(nextPos)) die(); // if next pos is void, die\n    //console.log(nextColor, appleData);\n    snake.unshift(nextPos);\n    drawSnakeSeg(nextPos);\n    document.querySelector('#score')!.textContent = `Score: ${snake.length}`;\n}\n\nfunction die() {\n    clearInterval(int);\n    ctx.fillStyle = pal.death;\n    ctx.font = `${canvas.width * 250 / 700}px 'Comic Sans MS', 'Papyrus', 'Impact', fantasy, cursive, sans-serif`;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText('F', canvas.width / 2, canvas.height / 2);\n\n    document.onkeydown = e => e.key == 'r' ? location.reload() : void 0;\n    document.onfocus = null;\n\n    let button = document.createElement('button');\n    button.textContent = 'Restart';\n    button.onclick = () => location.reload();\n    document.querySelector('#score')?.parentElement?.appendChild(button);\n}\n\nfunction toC(g: GameCoord | undefined): CanvasCoord {\n    // converts a game coord to canvas coord\n    return (g ?? [0, 0]).map(x => x * s) as CanvasCoord;\n}\nfunction toG(c: CanvasCoord | undefined): GameCoord {\n    // converts a canvas coord to game coord\n    return (c ?? [0, 0]).map(x => x / s) as GameCoord;\n}\nfunction isOutBound(g: GameCoord) {\n    // game bounds [0, gMaxWidth), [0, gMaxHeight)\n    return g[0] < 0 || g[0] >= gMaxWidth || g[1] < 0 || g[1] >= gMaxHeight;\n}\n\nfunction arrEq<T>(a1: T[], a2: T[]) {\n    return a1.every((x, i) => x == a2[i]);\n}\nfunction arrIncludes<T>(metarr: T[][], arr: T[]) {\n    return metarr.some(a => arrEq(a, arr));\n}\nexport {}","import arrayWithHoles from './_array_with_holes.mjs';\nimport iterableToArrayLimit from './_iterable_to_array.mjs';\nimport nonIterableRest from './_non_iterable_rest.mjs';\nimport unsupportedIterableToArray from './_unsupported_iterable_to_array.mjs';\n\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}\n","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n"],"names":["$d480212494b9508b$export$2e2bcd8739ae039","iter","Symbol","iterator","Array","from","$e0b5485d7b4e10d0$export$2e2bcd8739ae039","arr","len","length","i","arr2","$61a31d22c072bdf7$export$2e2bcd8739ae039","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","$3ed4113311a7145f$export$2e2bcd8739ae039","isArray","$dd1d74fbf13e3392$export$2e2bcd8739ae039","TypeError","$bff0ef45911c4072$export$2e2bcd8739ae039","c","$947e7a8f6fed5d00$var$apple","$947e7a8f6fed5d00$var$canvas","document","querySelector","$947e7a8f6fed5d00$var$ctx","getContext","$947e7a8f6fed5d00$var$s","$947e7a8f6fed5d00$var$ref","width","height","map","x","$947e7a8f6fed5d00$var$gMaxWidth","$947e7a8f6fed5d00$var$gMaxHeight","$947e7a8f6fed5d00$var$snake","Math","floor","$947e7a8f6fed5d00$var$facing","$947e7a8f6fed5d00$var$pal","$947e7a8f6fed5d00$var$drawGRect","$947e7a8f6fed5d00$var$drawApple","$947e7a8f6fed5d00$var$int","setInterval","$947e7a8f6fed5d00$var$update","g","cw","ch","color","_ctx","cshift","arguments","$947e7a8f6fed5d00$var$toC","fillStyle","fillRect","apply","concat","random","some","$947e7a8f6fed5d00$var$arrEq","nextPos","pop","metarr","a","$947e7a8f6fed5d00$var$arrIncludes","$947e7a8f6fed5d00$var$die","unshift","$947e7a8f6fed5d00$var$drawSnakeSeg","textContent","ref2","ref1","clearInterval","font","textAlign","textBaseline","fillText","onkeydown","e","key","location","reload","onfocus","button","createElement","onclick","parentElement","appendChild","a1","a2","every","code","onblur","undefined"],"version":3,"file":"snake.e99f4218.js.map"}