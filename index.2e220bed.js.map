{"mappings":"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","sources":["node_modules/.pnpm/@swc+helpers@0.4.3/node_modules/@swc/helpers/src/_define_property.mjs","src/index/boxes.ts"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n","type Coord = [number, number]; // each cell is 1 unit\ntype NormCoord = [number, number]; // the entire wrapper 1 unit\ntype RGB = [number, number, number];\n\nconst boxGridEl = document.querySelector('.box-grid')!;\n\nclass SquareTracker {\n    private static _MIN_ROWS = 3;\n    private _cols: number;\n    readonly projectSquares: HTMLElement[];\n    placeholderSquares: HTMLElement[];\n    corners: [RGB, RGB, RGB, RGB] = [ // top right, bottom right, top left, bottom left\n        [0x77, 0x77, 0x77],\n        [0x77, 0x77, 0x77],\n        [0x77, 0x77, 0x77],\n        [0x77, 0x77, 0x77]\n    ];\n\n    constructor() {\n        this._cols = +getComputedStyle(document.documentElement).getPropertyValue('--cols');\n\n        this.projectSquares = [...boxGridEl.querySelectorAll('a')];\n        for (let s of this.projectSquares) {\n            let colhex = document.createElement('span');\n            colhex.classList.add('colhex');\n\n            // allow ppl to copy if they want\n            colhex.addEventListener(\"click\", e => {\n                e.preventDefault();\n                e.stopPropagation();\n            });\n\n            s.appendChild(colhex);\n\n            s.classList.add('box');\n        }\n\n        this.placeholderSquares = [];\n        for (let i = this.squares; i < (this.cols * SquareTracker._MIN_ROWS); i++) {\n            this._addSquare();\n        }\n    }\n\n    get squares() {\n        return this.projectSquares.length + this.placeholderSquares.length;\n    }\n\n    get cols() {\n        return this._cols;\n    }\n    set cols(value) {\n        if (value != this._cols) {\n            this._cols = value;\n            this._rebalance();\n        }\n    }\n\n    get rows(): number {\n        return this.squares / this.cols;\n    }\n\n    private _addSquare() {\n        let box = document.createElement('div');\n        let title = document.createElement('div');\n        let desc = document.createElement('div');\n        let colhex = document.createElement('span');\n        \n        title.classList.add('title');\n        desc.classList.add('desc');\n        colhex.classList.add('colhex');\n        \n        box.classList.add('box');\n        box.append(title, desc, colhex);\n        box.addEventListener(\"click\", this.regenColors.bind(this, false));\n\n        // allow ppl to copy if they want\n        colhex.addEventListener(\"click\", e => e.stopPropagation());\n    \n        boxGridEl.appendChild(box);\n        this.placeholderSquares.push(box);\n    }\n\n    private _removeSquare() {\n        this.placeholderSquares.pop()?.remove();\n    }\n\n    private _rebalance() {\n        let squares = this.squares;\n        // n = number of squares that should be on board\n        let n = Math.max(this._cols * SquareTracker._MIN_ROWS, this.projectSquares.length);\n        n = Math.ceil(n / this._cols) * this._cols;\n\n        if (squares == n) return;\n        if (squares > n) {\n            for (let i = squares; i > n; i--) {\n                this._removeSquare();\n            }\n        } else if (squares < n) {\n            for (let i = squares; i < n; i++) {\n                this._addSquare();\n            }\n        }\n\n        this.regenColors(true);\n    }\n\n    forEach(callback: (value: HTMLElement, index: number) => void) {\n        let i = 0;\n        for (let e of this.projectSquares) callback(e, i++);\n        for (let e of this.placeholderSquares) callback(e, i++);\n    }\n\n    regenColors(useCurrentCorners: boolean = false) {\n        if (!useCurrentCorners) this.corners = Array.from({length: 4}, () => randRGB(0x50)) as [RGB, RGB, RGB, RGB];\n        let corners = this.corners;\n        \n        if (this._cols < 3) {\n            // use TL + BR boxes rather than the corners to make a consistent grid (rather than 2 columns of color)\n            let corners2: [RGB, RGB] = [corners[2], corners[1]];\n            this.assignColors(i => interpolate2(corners2, asCoord(i)), useCurrentCorners);\n        } else {\n            this.assignColors(i => interpolate4(corners, asNormCoord(i)), useCurrentCorners);\n        }\n\n    }\n\n    assignColors(callback: (cellIndex: number) => RGB, skipTransition = false) {\n        squares.forEach((s, i) => {\n            let clr = callback(i);\n            if (skipTransition) {\n                s.classList.add(\"no-transition\");\n                s.offsetHeight;\n            }\n            s.style.backgroundColor = hex(clr);\n    \n            s.querySelector('.colhex')!.textContent = hex(clr);\n        });\n\n        if (skipTransition) {\n            // return transition after color change\n            requestAnimationFrame(() => { // this is called before update\n                requestAnimationFrame(() => { // this is called after update\n                    squares.forEach(s => {\n                        s.classList.remove(\"no-transition\");\n                    });\n                });\n            });\n        }\n    }\n\n}\nlet squares = new SquareTracker();\nsquares.regenColors();\n\nwindow.addEventListener(\"resize\", e => {\n    squares.cols = +getComputedStyle(boxGridEl).getPropertyValue('--cols');\n})\nfunction asCoord(i: number): Coord {\n    // takes an index in the array, maps it to its [row, col] value\n    return [Math.floor(i / squares.cols), i % squares.cols];\n}\nfunction asNormCoord(i: number): NormCoord {\n    // takes an index in the array, maps it to its NormCoord value\n    let [r, c] = asCoord(i);\n    return [r / (squares.rows - 1), c / (squares.cols - 1)];\n}\n\nfunction randInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nfunction randRGB(min = 0, max = 256): RGB {\n    // [min, max)\n    return Array.from({length: 3}, () => randInt(min, max)) as RGB;\n}\nfunction hex(arr: RGB) {\n    // converts rgb array => hex notation\n    return `#${arr.map(x => Math.round(x).toString(16).padStart(2, \"0\")).join('')}`\n}\n\nfunction zip<A extends any[]>(...v: {[I in keyof A]: A[I][]}): A[] {\n    let length = v[0].length;\n    return Array.from({length}, (_, i) => v.map(a => a[i]) as A);\n}\n\nfunction lerp<T extends number[]>(pts: [T, T], dist: number): T {\n    let [p, q] = pts;\n    let length = p.length;\n    return Array.from({length}, (_, i) => {\n        let a = p[i], b = q[i];\n        return a + dist * (b - a);\n    }) as T;\n}\n\nfunction bilerp<T extends number[]>(pts: [T, T, T, T], c: NormCoord): T {\n    type ArrPair = [T, T];\n    let [px, py] = c;\n    let [top, bottom] = [pts.slice(0, 2) as ArrPair, pts.slice(2, 4) as ArrPair]\n    return lerp([lerp(bottom, px), lerp(top, px)], py);\n}\n\n// interpolate given that each corner is assigned a color\nfunction interpolate4(clrs: [RGB, RGB, RGB, RGB], c: NormCoord) {\n    // weight = how much each of the 4 points are valued based on the distance point c is from the corner\n    let weights = bilerp<[number, number, number, number]>([\n        [1,0,0,0],\n        [0,1,0,0],\n        [0,0,1,0],\n        [0,0,0,1]\n    ], c);\n\n    return Array.from({length: 3}, (_, i) => {\n        let channels = clrs.map(clr => clr[i]);\n\n        let sqsum = zip(channels, weights)\n            .map(([c, w]) => w * c * c)\n            .reduce((acc, cv) => acc + cv);\n        \n        return Math.round(Math.sqrt(sqsum));\n    }) as RGB;\n}\n\nfunction manhattan(p: Coord, q: Coord): number {\n    return zip(p, q)\n        .map(([px, qx]) => Math.abs(px - qx))\n        .reduce((acc, cv) => acc + cv);\n}\n\n// interpolate given that the top left and bottom right are assigned colors\nfunction interpolate2(clrs: [RGB, RGB], c: Coord) {\n    // weight = how much each of the 2 points are valued based on the distance point c is from the corner\n    let [aw, bw] = [\n        manhattan([0, 0], c),\n        manhattan([squares.rows - 1, squares.cols - 1], c),\n    ];\n    let weights = [\n        bw / (aw + bw), // note, flipped\n        aw / (aw + bw)\n    ];\n\n    return Array.from({length: 3}, (_, i) => {\n        let channels = clrs.map(clr => clr[i]);\n\n        let sqsum = zip(channels, weights)\n            .map(([c, w]) => w * c * c)\n            .reduce((acc, cv) => acc + cv);\n        \n        return Math.round(Math.sqrt(sqsum));\n    }) as RGB;\n}\n\nexport {}; // recognize as module"],"names":["$40c9613bd02c2129$export$2e2bcd8739ae039","obj","key","value","Object","defineProperty","enumerable","configurable","writable","$d05d6add4b7bc7a0$var$boxGridEl","document","querySelector","$d05d6add4b7bc7a0$var$SquareTracker","squares","this","projectSquares","length","placeholderSquares","cols","_cols","_rebalance","rows","_addSquare","box","createElement","title","desc","colhex","classList","add","append","addEventListener","regenColors","bind","e","stopPropagation","appendChild","push","_removeSquare","pop","remove","squares1","n","Math","max","_MIN_ROWS","ceil","i","i1","forEach","callback","e1","useCurrentCorners","corners","Array","from","min","floor","random","$d05d6add4b7bc7a0$var$randInt","$d05d6add4b7bc7a0$var$randRGB","corners2","assignColors","clrs","c2","aw","bw","$d05d6add4b7bc7a0$var$manhattan","$d05d6add4b7bc7a0$var$squares","weights","_","sqsum","$d05d6add4b7bc7a0$var$zip","map","clr","c","w","reduce","acc","cv","round","sqrt","$d05d6add4b7bc7a0$var$interpolate2","$d05d6add4b7bc7a0$var$asCoord","c1","pts","px","py","top","bottom","slice","$d05d6add4b7bc7a0$var$lerp","$d05d6add4b7bc7a0$var$bilerp","$d05d6add4b7bc7a0$var$interpolate4","r","$d05d6add4b7bc7a0$var$asNormCoord","skipTransition","s","offsetHeight","style","backgroundColor","$d05d6add4b7bc7a0$var$hex","textContent","requestAnimationFrame","constructor","getComputedStyle","documentElement","getPropertyValue","querySelectorAll","preventDefault","arr","x","toString","padStart","join","v","a","dist","p","q","b","qx","abs","window"],"version":3,"file":"index.2e220bed.js.map"}