{"mappings":"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","sources":["src/index/boxes.ts"],"sourcesContent":["type Coord = [number, number];\ntype RGB = [number, number, number];\n\nlet wrapper = document.querySelector('.wrapper')!;\nlet squares = [...document.querySelectorAll('.wrapper a')] as HTMLElement[];\n\nlet cols = +getComputedStyle(wrapper).getPropertyValue('--cols');\nlet rows = 3; // add more placeholder project boxes by changing this\n\nif (squares.length > cols * rows) rows = Math.ceil(squares.length / cols);\n\nfor (let i = squares.length; i < (cols * rows); i++) {\n    createPlaceholderSquare();\n}\n\nfor (let s of squares) {\n    let span = document.createElement('span');\n    span.classList.add('colhex');\n    s.appendChild(span);\n}\n\nregenColors();\n\nfunction createPlaceholderSquare() {\n    let a = document.createElement('a');\n    let title = document.createElement('div');\n    let desc = document.createElement('div');\n\n    title.classList.add('title');\n    desc.classList.add('desc');\n\n    a.appendChild(title);\n    a.appendChild(desc);\n    a.onclick = regenColors;\n\n    wrapper.appendChild(a);\n    squares.push(a);\n}\n\nfunction regenColors() {\n    let cornerClrs = Array.from({length: 4}, () => randRGB(0x50)) as [RGB, RGB, RGB, RGB];\n    setColors(cornerClrs);\n}\n\nfunction setColors(cornerClrs: [RGB, RGB, RGB, RGB]) {\n    squares.forEach((s, i) => {\n        let [pr, pc] = asCoord(i);\n        let normPos = [pr / (rows - 1), pc / (cols - 1)] as [number, number];\n        let clr = interpolate(cornerClrs, normPos);\n\n        s.style.backgroundColor = rgb(clr);\n\n        let hexText = s.querySelector('.colhex')!;\n        hexText.textContent = hex(clr);\n    });\n}\n\nfunction randInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nfunction randRGB(min = 0, max = 256): RGB {\n    // [min, max)\n    return Array.from({length: 3}, () => randInt(min, max)) as RGB;\n}\nfunction rgb(arr: RGB) {\n    // converts rgb array => rgb(#, #, #) notation in css\n    return `rgb(${arr.join(',')})`\n}\nfunction hex(arr: RGB) {\n    // converts rgb array => hex notation\n    return `#${arr.map(x => Math.round(x).toString(16).padStart(2, \"0\")).join('')}`\n}\nfunction asCoord(i: number): Coord {\n    // takes an index in the array, maps it to its [row, col] value\n    return [Math.floor(i / cols), i % cols];\n}\n\nfunction zip<T, U>(t: T[], u: U[]): [T, U][] {\n    return t.map((t, i) => [t, u[i]]);\n}\nfunction lerp<T extends number[]>(pts: [T, T], dist: number): T {\n    let [p, q] = pts;\n    let length = p.length;\n    return Array.from({length}, (_, i) => {\n        let a = p[i], b = q[i];\n        return a + dist * (b - a);\n    }) as T;\n}\n\nfunction bilerp<T extends number[]>(pts: [T, T, T, T], dist: [number, number]): T {\n    type ArrPair = [T, T];\n    let [px, py] = dist;\n    let [top, bottom] = [pts.slice(0, 2) as ArrPair, pts.slice(2, 4) as ArrPair]\n    return lerp([lerp(top, px), lerp(bottom, px)], py);\n}\n\nfunction calcWeights(dist: [number, number]) {\n    return bilerp<[number, number, number, number]>([\n        [1,0,0,0],\n        [0,1,0,0],\n        [0,0,1,0],\n        [0,0,0,1]\n    ], dist);\n}\n\nfunction interpolate(clrs: [RGB, RGB, RGB, RGB], dist: [number, number]) {\n    let weights = calcWeights(dist);\n    return Array.from({length: 3}, (_, i) => {\n        let channels = clrs.map(clr => clr[i]);\n\n        let sqsum = zip(channels, weights)\n            .map(([c, w]) => w * c * c)\n            .reduce((acc, cv) => acc + cv);\n        \n        return Math.round(Math.sqrt(sqsum));\n    }) as RGB;\n}\n\nexport {}; // recognize as module"],"names":["$0b55116577e5af38$var$wrapper","document","querySelector","$0b55116577e5af38$var$squares","querySelectorAll","$0b55116577e5af38$var$cols","getComputedStyle","getPropertyValue","$0b55116577e5af38$var$rows","length","Math","ceil","i","$0b55116577e5af38$var$createPlaceholderSquare","s","span","createElement","classList","add","appendChild","a","title","desc","onclick","$0b55116577e5af38$var$regenColors","push","cornerClrs","forEach","s1","i1","pr","pc","i2","floor","clr","clrs","dist","weights","pts","px","py","top","bottom","slice","$0b55116577e5af38$var$lerp","$0b55116577e5af38$var$bilerp","$0b55116577e5af38$var$calcWeights","Array","from","_","channels","map","sqsum","t1","u","t","c","w","reduce","acc","cv","round","sqrt","$0b55116577e5af38$var$interpolate","style","backgroundColor","join","textContent","arr","x","toString","padStart","$0b55116577e5af38$var$hex","$0b55116577e5af38$var$setColors","min","max","random","$0b55116577e5af38$var$randInt","$0b55116577e5af38$var$randRGB","p","q","b"],"version":3,"file":"index.5cef7639.js.map"}