{"mappings":"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","sources":["src/index/boxes.ts"],"sourcesContent":["type Coord = [number, number]; // each cell is 1 unit\ntype NormCoord = [number, number]; // the entire wrapper 1 unit\ntype RGB = [number, number, number];\n\nlet wrapper = document.querySelector('.wrapper')!;\n\nclass SquareTracker {\n    static #MIN_ROWS = 3;\n    #columns: number;\n    readonly projectSquares: HTMLElement[];\n    placeholderSquares: HTMLElement[];\n    corners: [RGB, RGB, RGB, RGB] = [ // top right, bottom right, top left, bottom left\n        [0x77, 0x77, 0x77],\n        [0x77, 0x77, 0x77],\n        [0x77, 0x77, 0x77],\n        [0x77, 0x77, 0x77]\n    ];\n\n    constructor() {\n        this.#columns = +getComputedStyle(wrapper).getPropertyValue('--cols');\n\n        this.projectSquares = [...wrapper.querySelectorAll('a')];\n        for (let s of this.projectSquares) {\n            let span = document.createElement('span');\n            span.classList.add('colhex');\n            s.appendChild(span);\n        }\n\n        this.placeholderSquares = [];\n        for (let i = this.squares; i < (this.cols * SquareTracker.#MIN_ROWS); i++) {\n            this.#addSquare();\n        }\n    }\n\n    get squares() {\n        return this.projectSquares.length + this.placeholderSquares.length;\n    }\n\n    get cols() {\n        return this.#columns;\n    }\n    set cols(value) {\n        if (value != this.#columns) {\n            this.#columns = value;\n            this.#rebalance();\n        }\n    }\n\n    get rows(): number {\n        return this.squares / this.cols;\n    }\n\n    #addSquare() {\n        let a = document.createElement('a');\n        let title = document.createElement('div');\n        let desc = document.createElement('div');\n        let colhex = document.createElement('span');\n        \n        title.classList.add('title');\n        desc.classList.add('desc');\n        colhex.classList.add('colhex');\n        \n        a.appendChild(title);\n        a.appendChild(desc);\n        a.appendChild(colhex);\n        a.addEventListener(\"click\", this.regenColors.bind(this, false));\n    \n        wrapper.appendChild(a);\n        this.placeholderSquares.push(a);\n    }\n\n    #removeSquare() {\n        this.placeholderSquares.pop()?.remove();\n    }\n\n    #rebalance() {\n        let squares = this.squares;\n        // n = number of squares that should be on board\n        let n = Math.max(this.#columns * SquareTracker.#MIN_ROWS, this.projectSquares.length);\n        n = Math.ceil(n / this.#columns) * this.#columns;\n\n        if (squares == n) return;\n        if (squares > n) {\n            for (let i = squares; i > n; i--) {\n                this.#removeSquare();\n            }\n        } else if (squares < n) {\n            for (let i = squares; i < n; i++) {\n                this.#addSquare();\n            }\n        }\n\n        this.regenColors(true);\n    }\n\n    forEach(callback: (value: HTMLElement, index: number) => void) {\n        let i = 0;\n        for (let e of this.projectSquares) callback(e, i++);\n        for (let e of this.placeholderSquares) callback(e, i++);\n    }\n\n    regenColors(useCurrentCorners: boolean = false) {\n        if (!useCurrentCorners) this.corners = Array.from({length: 4}, () => randRGB(0x50)) as [RGB, RGB, RGB, RGB];\n        let corners = this.corners;\n        \n        if (this.#columns < 3) {\n            // use TL + BR boxes rather than the corners to make a consistent grid (rather than 2 columns of color)\n            let corners2: [RGB, RGB] = [corners[2], corners[1]];\n            this.assignColors(i => interpolate2(corners2, asCoord(i)), useCurrentCorners);\n        } else {\n            this.assignColors(i => interpolate4(corners, asNormCoord(i)), useCurrentCorners);\n        }\n\n    }\n\n    assignColors(callback: (cellIndex: number) => RGB, skipTransition = false) {\n        squares.forEach((s, i) => {\n            let clr = callback(i);\n            if (skipTransition) {\n                s.classList.add(\"no-transition\");\n                s.offsetHeight;\n            }\n            s.style.backgroundColor = hex(clr);\n    \n            s.querySelector('.colhex')!.textContent = hex(clr);\n        });\n\n        if (skipTransition) {\n            // return transition after color change\n            requestAnimationFrame(() => { // this is called before update\n                requestAnimationFrame(() => { // this is called after update\n                    squares.forEach(s => {\n                        s.classList.remove(\"no-transition\");\n                    });\n                });\n            });\n        }\n    }\n\n}\nlet squares = new SquareTracker();\nsquares.regenColors();\n\nwindow.addEventListener(\"resize\", e => {\n    squares.cols = +getComputedStyle(wrapper).getPropertyValue('--cols');\n})\nfunction asCoord(i: number): Coord {\n    // takes an index in the array, maps it to its [row, col] value\n    return [Math.floor(i / squares.cols), i % squares.cols];\n}\nfunction asNormCoord(i: number): NormCoord {\n    // takes an index in the array, maps it to its NormCoord value\n    let [r, c] = asCoord(i);\n    return [r / (squares.rows - 1), c / (squares.cols - 1)];\n}\n\nfunction randInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nfunction randRGB(min = 0, max = 256): RGB {\n    // [min, max)\n    return Array.from({length: 3}, () => randInt(min, max)) as RGB;\n}\nfunction hex(arr: RGB) {\n    // converts rgb array => hex notation\n    return `#${arr.map(x => Math.round(x).toString(16).padStart(2, \"0\")).join('')}`\n}\n\nfunction zip<A extends any[]>(...v: {[I in keyof A]: A[I][]}): A[] {\n    let length = v[0].length;\n    return Array.from({length}, (_, i) => v.map(a => a[i]) as A);\n}\n\nfunction lerp<T extends number[]>(pts: [T, T], dist: number): T {\n    let [p, q] = pts;\n    let length = p.length;\n    return Array.from({length}, (_, i) => {\n        let a = p[i], b = q[i];\n        return a + dist * (b - a);\n    }) as T;\n}\n\nfunction bilerp<T extends number[]>(pts: [T, T, T, T], c: NormCoord): T {\n    type ArrPair = [T, T];\n    let [px, py] = c;\n    let [top, bottom] = [pts.slice(0, 2) as ArrPair, pts.slice(2, 4) as ArrPair]\n    return lerp([lerp(bottom, px), lerp(top, px)], py);\n}\n\n// interpolate given that each corner is assigned a color\nfunction interpolate4(clrs: [RGB, RGB, RGB, RGB], c: NormCoord) {\n    // weight = how much each of the 4 points are valued based on the distance point c is from the corner\n    let weights = bilerp<[number, number, number, number]>([\n        [1,0,0,0],\n        [0,1,0,0],\n        [0,0,1,0],\n        [0,0,0,1]\n    ], c);\n\n    return Array.from({length: 3}, (_, i) => {\n        let channels = clrs.map(clr => clr[i]);\n\n        let sqsum = zip(channels, weights)\n            .map(([c, w]) => w * c * c)\n            .reduce((acc, cv) => acc + cv);\n        \n        return Math.round(Math.sqrt(sqsum));\n    }) as RGB;\n}\n\nfunction manhattan(p: Coord, q: Coord): number {\n    return zip(p, q)\n        .map(([px, qx]) => Math.abs(px - qx))\n        .reduce((acc, cv) => acc + cv);\n}\n\n// interpolate given that the top left and bottom right are assigned colors\nfunction interpolate2(clrs: [RGB, RGB], c: Coord) {\n    // weight = how much each of the 2 points are valued based on the distance point c is from the corner\n    let [aw, bw] = [\n        manhattan([0, 0], c),\n        manhattan([squares.rows - 1, squares.cols - 1], c),\n    ];\n    let weights = [\n        bw / (aw + bw), // note, flipped\n        aw / (aw + bw)\n    ];\n\n    return Array.from({length: 3}, (_, i) => {\n        let channels = clrs.map(clr => clr[i]);\n\n        let sqsum = zip(channels, weights)\n            .map(([c, w]) => w * c * c)\n            .reduce((acc, cv) => acc + cv);\n        \n        return Math.round(Math.sqrt(sqsum));\n    }) as RGB;\n}\n\nexport {}; // recognize as module"],"names":["$7uoCD","parcelRequire","$b2ecc1262834a993$var$wrapper","document","querySelector","_columns","WeakMap","_addSquare","WeakSet","_removeSquare","_rebalance","$b2ecc1262834a993$var$SquareTracker","classPrivateMethodInit","this","classPrivateFieldInit","defineProperty","getComputedStyle","getPropertyValue","projectSquares","toConsumableArray","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","s","value","span","createElement","classList","add","appendChild","err","return","placeholderSquares","i","squares","cols","classStaticPrivateFieldSpecGet","_MIN_ROWS","classPrivateMethodGet","addSquare","call","key","length","classPrivateFieldGet","rebalance","callback","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","useCurrentCorners","arguments","corners","Array","from","$b2ecc1262834a993$var$randRGB","corners2","assignColors","$b2ecc1262834a993$var$interpolate2","$b2ecc1262834a993$var$asCoord","$b2ecc1262834a993$var$interpolate4","$b2ecc1262834a993$var$asNormCoord","skipTransition","$b2ecc1262834a993$var$squares","forEach","clr","offsetHeight","style","backgroundColor","$b2ecc1262834a993$var$hex","textContent","requestAnimationFrame","remove","a","title","desc","colhex","addEventListener","regenColors","bind","push","removeSquare","ref","pop","n","Math","max","ceil","i1","floor","slicedToArray","r","c","rows","$b2ecc1262834a993$var$randInt","min","random","arr","concat","map","x","round","toString","padStart","join","$b2ecc1262834a993$var$zip","_len","v","_key","_","$b2ecc1262834a993$var$lerp","pts","dist","_pts","p","q","b","clrs","weights","_c","px","py","slice","top","$b2ecc1262834a993$var$bilerp","sqsum","param","_$c","_param","reduce","acc","cv","sqrt","$b2ecc1262834a993$var$manhattan","qx","abs","aw","bw","window","e"],"version":3,"file":"index.d15e9210.js.map"}