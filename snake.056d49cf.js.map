{"mappings":"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","sources":["node_modules/.pnpm/@swc+helpers@0.2.14/node_modules/@swc/helpers/src/_iterable_to_array.js","node_modules/.pnpm/@swc+helpers@0.2.14/node_modules/@swc/helpers/src/_to_consumable_array.js","node_modules/.pnpm/@swc+helpers@0.2.14/node_modules/@swc/helpers/src/_array_without_holes.js","node_modules/.pnpm/@swc+helpers@0.2.14/node_modules/@swc/helpers/src/_non_iterable_spread.js","src/snake/snake.ts","node_modules/.pnpm/@swc+helpers@0.2.14/node_modules/@swc/helpers/src/_sliced_to_array.js","node_modules/.pnpm/@swc+helpers@0.2.14/node_modules/@swc/helpers/src/_array_with_holes.js","node_modules/.pnpm/@swc+helpers@0.2.14/node_modules/@swc/helpers/src/_non_iterable_rest.js"],"sourcesContent":["export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n","import arrayWithoutHoles from './_array_without_holes';\nimport iterableToArray from './_iterable_to_array';\nimport nonIterableSpread from './_non_iterable_spread';\n\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}\n","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n","const canvas = document.querySelector('#canvas')! as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d')!;\n\nlet s = 25; // 1 game pixel = s canvas pixels\n\ntype GameCoord = [number, number];\ntype CanvasCoord = [number, number];\nlet [gMaxWidth, gMaxHeight] = toG([canvas.width, canvas.height]);\nlet snake: GameCoord[] = [[Math.floor(gMaxWidth / 4), Math.floor(gMaxHeight / 2)]]; // [head, ..., tail]\nlet facing = 'e'; //n, e, s, w\n\nlet apple: GameCoord;\n\n// CONFIG //\nconst pal = { // color palette\n    bg: '#222',\n    snake: '#0b0',\n    apple: '#d00',\n    death: '#fff',\n}\nsnake.length = 5; // initial snake length\nconst tpu = 75; // ticks per update\n\n\ndrawGRect([0,0], canvas.width, canvas.height, pal.bg, [0, 0]); // draw bg\ndrawGRect(snake[0], s - 2, s - 2, pal.snake); // draw snake\ndrawApple();\nlet int: number | undefined = setInterval(update, tpu);\n\ndocument.onkeydown = e => {\n    switch (e.code) {\n        case 'KeyW':\n        case 'ArrowUp':\n            if (facing != 's' && facing != 'n') {\n                facing = 'n';\n                update();\n            }\n            break;\n        case 'KeyA':\n        case 'ArrowLeft':\n            if (facing != 'e' && facing != 'w') {\n                facing = 'w';\n                update();\n            }\n            break;\n        case 'KeyS':\n        case 'ArrowDown':\n            if (facing != 's' && facing != 'n') {\n                facing = 's';\n                update();\n            }\n            break;\n        case 'KeyD':\n        case 'ArrowRight':\n            if (facing != 'e' && facing != 'w') {\n                facing = 'e';\n                update();\n            }\n            break;\n        case 'KeyR':\n            die()\n            break;\n    }\n};\n\ndocument.onblur = () => {\n    clearInterval(int);\n    int = undefined;\n}\n\ndocument.onfocus = () => {\n    int = int || setInterval(update, tpu);\n}\nfunction drawGRect(g: GameCoord, cw: number, ch: number, color: string, cshift = [1,1]) {\n    let c = toC(g).map((x, i) => x + cshift[i]) as CanvasCoord; // conv g coord and then shift point in c space\n    ctx.fillStyle = color;\n    ctx.fillRect(...c, cw, ch);\n}\n\nfunction drawSnakeSeg(g: GameCoord) {\n    /*\n     * if s = 4,\n     * ........\n     * .xx..xx.\n     * .xx..xx.\n     * ........\n     * o.......\n     * .xx..xx.\n     * .xx..xx.\n     * ........\n     *\n     *\n     *\n     */\n    switch (facing) {\n        case 'n':\n            drawGRect(g, s-2, s, pal.snake)//, [1, 1]);\n            break;    \n        case 'e':\n            drawGRect(g, s, s-2, pal.snake, [-1, 1])//, [-1, 1]);\n            break;\n        case 's':\n            drawGRect(g, s-2, s, pal.snake, [1, -1])//, [1, -1]);\n            break;\n        case 'w':\n            drawGRect(g, s, s-2, pal.snake)//, [1, 1]);\n            break;\n    }\n}\n\nfunction drawApple() {\n    do {\n        apple = [Math.floor(Math.random() * gMaxWidth), Math.floor(Math.random() * gMaxHeight)];\n    } while (snake.some(x => arrEq(x, apple)))\n    drawGRect(apple, s - 2, s - 2, pal.apple); // spawn apple\n}\n\nfunction update() {\n    let nextPos: GameCoord = [...snake[0]]; //clone head\n    switch (facing) {\n        case 'n':\n            nextPos[1]--;\n            break;\n        case 'e':\n            nextPos[0]++;\n            break;\n        case 's':\n            nextPos[1]++;\n            break;\n        case 'w':\n            nextPos[0]--;\n            break;\n    }\n    if(!arrEq(apple, nextPos)) {\n        // if next pos is not apple, delete tail\n        let stail = snake.pop()!;\n        drawGRect(stail, s + 2, s + 2, pal.bg, [-1, -1]);\n    }\n    if(arrEq(apple, nextPos)) drawApple(); // if next pos is apple, spawn a new apple\n    if(arrIncludes(snake, nextPos)) die(); // if next pos is snake, die\n    if (isOutBound(nextPos)) die(); // if next pos is void, die\n    //console.log(nextColor, appleData);\n    snake.unshift(nextPos);\n    drawSnakeSeg(nextPos);\n    document.querySelector('#score')!.textContent = `Score: ${snake.length}`;\n}\n\nfunction die() {\n    clearInterval(int);\n    ctx.fillStyle = pal.death;\n    ctx.font = `${canvas.width * 250 / 700}px 'Comic Sans MS', 'Papyrus', 'Impact', fantasy, cursive, sans-serif`;\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    ctx.fillText('F', canvas.width / 2, canvas.height / 2);\n\n    document.onkeydown = e => e.key == 'r' ? location.reload() : void 0;\n    document.onfocus = null;\n\n    let button = document.createElement('button');\n    button.textContent = 'Restart';\n    button.onclick = () => location.reload();\n    document.querySelector('#score')?.parentElement?.appendChild(button);\n}\n\nfunction toC(g: GameCoord | undefined): CanvasCoord {\n    // converts a game coord to canvas coord\n    return (g ?? [0, 0]).map(x => x * s) as CanvasCoord;\n}\nfunction toG(c: CanvasCoord | undefined): GameCoord {\n    // converts a canvas coord to game coord\n    return (c ?? [0, 0]).map(x => x / s) as GameCoord;\n}\nfunction isOutBound(g: GameCoord) {\n    // game bounds [0, gMaxWidth), [0, gMaxHeight)\n    return g[0] < 0 || g[0] >= gMaxWidth || g[1] < 0 || g[1] >= gMaxHeight;\n}\n\nfunction arrEq<T>(a1: T[], a2: T[]) {\n    return a1.every((x, i) => x == a2[i]);\n}\nfunction arrIncludes<T>(metarr: T[][], arr: T[]) {\n    return metarr.some(a => arrEq(a, arr));\n}\nexport {}","import arrayWithHoles from './_array_with_holes';\nimport iterableToArrayLimit from './_iterable_to_array';\nimport nonIterableRest from './_non_iterable_rest';\n\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n"],"names":["iter","Symbol","iterator","Object","prototype","toString","call","Array","from","arr","isArray","i","arr2","length","$07df187b2be93f6f$export$2e2bcd8739ae039","$f9b3c2721440328e$export$2e2bcd8739ae039","TypeError","$fa64671221d83b8d$export$2e2bcd8739ae039","c","$947e7a8f6fed5d00$var$apple","$947e7a8f6fed5d00$var$canvas","document","querySelector","$947e7a8f6fed5d00$var$ctx","getContext","$947e7a8f6fed5d00$var$s","ref","width","height","$4515323e8d673ad6$export$2e2bcd8739ae039","map","x","$473605b13ca06551$export$2e2bcd8739ae039","$947e7a8f6fed5d00$var$gMaxWidth","$947e7a8f6fed5d00$var$gMaxHeight","$947e7a8f6fed5d00$var$snake","Math","floor","$947e7a8f6fed5d00$var$facing","$947e7a8f6fed5d00$var$pal","$947e7a8f6fed5d00$var$drawGRect","$947e7a8f6fed5d00$var$drawApple","$947e7a8f6fed5d00$var$int","setInterval","$947e7a8f6fed5d00$var$update","g","cw","ch","color","_ctx","cshift","arguments","$947e7a8f6fed5d00$var$toC","fillStyle","fillRect","apply","$0acbc2ca6d9304d9$export$2e2bcd8739ae039","concat","random","some","$947e7a8f6fed5d00$var$arrEq","nextPos","pop","metarr","a","$947e7a8f6fed5d00$var$arrIncludes","$947e7a8f6fed5d00$var$die","unshift","$947e7a8f6fed5d00$var$drawSnakeSeg","textContent","ref2","ref1","clearInterval","font","textAlign","textBaseline","fillText","onkeydown","e","key","location","reload","onfocus","button","createElement","onclick","parentElement","appendChild","a1","a2","every","code","onblur","undefined"],"version":3,"file":"snake.056d49cf.js.map"}