{"mappings":"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","sources":["src/taylor2/calc.ts"],"sourcesContent":["import { create, all } from \"mathjs\";\n\nconst math = create(all);\n\nconst X = math.parse(\"x\") as math.SymbolNode;\nconst Y = math.parse(\"y\") as math.SymbolNode;\n\ntype TaylorTerm = [number | math.Fraction, number, number]; // coeff, x exp, y exp\ntype TaylorMessage = [string, number, number, number]; // expr, n, a, b\n\nonmessage = function(e) {\n    let dat = e.data as TaylorMessage;\n    postMessage(taylor(...dat));\n}\n\nfunction pascal_row(n: number) {\n    // calculate the coefficients of (x + y)^n\n    return Array.from({length: n + 1}, (_, i) => math.combinations(n, i))\n}\n\nfunction taylorTerms(expr: string, n = 2, a = 0, b = 0): TaylorTerm[] {\n\n    // compute taylor\n    let exprNode: math.MathNode = math.parse(expr);\n    let approxComponents: TaylorTerm[] = []\n    let order: math.MathNode[] = [] // partials. for n = 3: fxxx, fxxy, fxyy, fyyy\n\n    for (let i = 0; i <= n; i++) {\n        if (order.length == 0) {\n            order = [exprNode];\n        } else {\n            let first_order = order[0]\n            let new_order = [math.derivative(first_order, X)];\n            \n            for (let e of order) {\n                new_order.push(math.derivative(e, Y));\n            }\n\n            order = new_order;\n        }\n\n        let pascal = pascal_row(i);\n        for (var j = 0; j <= i; j++) {\n            let p = pascal[j];\n            let e = order[j].evaluate({x: a, y: b});\n            let f = math.factorial(i);\n\n            let ee = math.fraction(e);\n            let coeff: number | math.Fraction = math.multiply(math.fraction(p, f), ee) as math.Fraction;\n            // coeff = (pascal) * (derivative) / factorial\n            approxComponents.push([coeff, i - j, j]);\n        }\n    }\n\n    return approxComponents;\n}\n\nfunction stringify(v: number | math.Fraction) {\n    if (math.isInteger(v)) {\n        v = math.number(v) as number;\n    }\n    return math.format(v);\n}\n\nfunction displayTaylor(a: number, b: number, tc: TaylorTerm[]): string {\n    let taylorStringComponents = tc.map(([c, xe, ye]) => {\n        let segs: {h?: math.MathNode, k?: math.MathNode} = {};\n        if (c == 0) return \"0\";\n\n        segs.h = math.parse(`(x - ${a}) ^ ${xe}`);\n        segs.k = math.parse(`(y - ${b}) ^ ${ye}`);\n\n        let expr = math.simplify(\"h * k\", segs);\n\n        let es = expr.toString();\n        if (es === \"1\") {\n            return stringify(c);\n        } else {\n            let coeff;\n            if (c == 1) coeff = \"\";\n            else if (c == -1) coeff = \"-\";\n            else coeff = stringify(c) + \" * \";\n\n            if (expr.type === \"OperatorNode\" && (expr.op === \"+\" || expr.op === \"-\") && coeff !== \"\") {\n                return coeff + `(${es})`;\n            }\n            return coeff + es;\n        }\n    }).filter(x => x != \"0\");\n\n    if (taylorStringComponents.length == 0) return \"0\";\n\n    return taylorStringComponents.reduce((acc, cv) => {\n        let nextTermNeg = cv.startsWith(\"-\");\n\n        if (nextTermNeg) {\n            return `${acc} - ${cv.slice(1)}`;\n        } else {\n            return `${acc} + ${cv}`;\n        }\n    });\n}\n\nfunction taylor(expr: string, n = 2, a = 0, b = 0): string {\n    return displayTaylor(a, b, taylorTerms(expr, n, a, b));\n}\n\nexport default taylor;\nexport {TaylorMessage};"],"names":["$c185697d0408343e$var$math","$1LVZF","create","all","$c185697d0408343e$var$X","parse","$c185697d0408343e$var$Y","$c185697d0408343e$var$pascal_row","n","Array","from","length","_","i","combinations","$c185697d0408343e$var$taylorTerms","expr","arguments","a","b","exprNode","approxComponents","order","first_order","new_order","derivative","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","e","value","push","err","return","pascal","j","p","e1","evaluate","x","y","f","factorial","ee","fraction","coeff","multiply","$c185697d0408343e$var$stringify","v","isInteger","number","format","$c185697d0408343e$var$displayTaylor","tc","taylorStringComponents","map","param","c","_param","xe","ye","segs","h","concat","k","simplify","es","toString","type","op","filter","reduce","acc","cv","startsWith","slice","$c185697d0408343e$var$taylor","onmessage","dat","data","postMessage","apply","$cn4VO","toConsumableArray","$c185697d0408343e$export$2e2bcd8739ae039"],"version":3,"file":"calc.4705fe09.js.map"}