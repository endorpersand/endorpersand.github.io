{"mappings":"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","sources":["node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_class_extract_field_descriptor.js","node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_class_apply_descriptor_get.js","node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_class_private_field_get.js","node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_check_private_redeclaration.js","node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_class_private_field_set.js","node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_class_apply_descriptor_set.js","node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_class_private_method_get.js","node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_class_private_method_init.js","node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_class_check_private_static_access.js","node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_class_static_private_field_spec_get.js","src/index/boxes.ts","node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_class_private_field_init.js","node_modules/.pnpm/@swc+helpers@0.3.17/node_modules/@swc/helpers/src/_define_property.js"],"sourcesContent":["export default function _classExtractFieldDescriptor(receiver, privateMap, action) {\n  if (!privateMap.has(receiver)) {\n    throw new TypeError(\"attempted to \" + action + \" private field on non-instance\");\n  }\n  return privateMap.get(receiver);\n}\n","export default function _classApplyDescriptorGet(receiver, descriptor) {\n  if (descriptor.get) {\n    return descriptor.get.call(receiver);\n  }\n  return descriptor.value;\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor';\nimport classApplyDescriptorGet from './_class_apply_descriptor_get';\n\nexport default function _classPrivateFieldGet(receiver, privateMap) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}\n","export default function _checkPrivateRedeclaration(obj, privateCollection) {\n  if (privateCollection.has(obj)) {\n    throw new TypeError(\"Cannot initialize the same private elements twice on an object\");\n  }\n}\n","import classExtractFieldDescriptor from './_class_extract_field_descriptor';\nimport classApplyDescriptorSet from './_class_apply_descriptor_set';\n\nexport default function _classPrivateFieldSet(receiver, privateMap, value) {\n  var descriptor = classExtractFieldDescriptor(receiver, privateMap, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}\n","export default function _classApplyDescriptorSet(receiver, descriptor, value) {\n  if (descriptor.set) {\n    descriptor.set.call(receiver, value);\n  } else {\n    if (!descriptor.writable) {\n      // This should only throw in strict mode, but class bodies are\n      // always strict and private fields can only be used inside\n      // class bodies.\n      throw new TypeError(\"attempted to set read only private field\");\n    }\n    descriptor.value = value;\n  }\n}\n","export default function _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n\n  return fn;\n}\n","import _checkPrivateRedeclaration from \"./_check_private_redeclaration\";\n\nexport default function _classPrivateMethodInit(obj, privateSet) {\n  _checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}\n","export default function _classCheckPrivateStaticAccess(receiver, classConstructor) { \n  if (receiver !== classConstructor) {\n    throw new TypeError(\"Private static access of wrong provenance\");\n  } \n}\n","import classCheckPrivateStaticAccess from './_class_check_private_static_access';\nimport classCheckPrivateStaticFieldDescriptor from './_class_check_private_static_access';\nimport classApplyDescriptorGet from './_class_apply_descriptor_get';\n\nexport default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  classCheckPrivateStaticFieldDescriptor(descriptor, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}\n","type Coord = [number, number]; // each cell is 1 unit\ntype NormCoord = [number, number]; // the entire wrapper 1 unit\ntype RGB = [number, number, number];\n\nlet wrapper = document.querySelector('.wrapper')!;\n\nclass SquareTracker {\n    static #MIN_ROWS = 3;\n    #columns: number;\n    readonly projectSquares: HTMLElement[];\n    placeholderSquares: HTMLElement[];\n    corners: [RGB, RGB, RGB, RGB] = [ // top right, bottom right, top left, bottom left\n        [0x77, 0x77, 0x77],\n        [0x77, 0x77, 0x77],\n        [0x77, 0x77, 0x77],\n        [0x77, 0x77, 0x77]\n    ];\n\n    constructor() {\n        this.#columns = +getComputedStyle(wrapper).getPropertyValue('--cols');\n\n        this.projectSquares = [...wrapper.querySelectorAll('a')];\n        for (let s of this.projectSquares) {\n            let span = document.createElement('span');\n            span.classList.add('colhex');\n            s.appendChild(span);\n        }\n\n        this.placeholderSquares = [];\n        for (let i = this.squares; i < (this.cols * SquareTracker.#MIN_ROWS); i++) {\n            this.#addSquare();\n        }\n    }\n\n    get squares() {\n        return this.projectSquares.length + this.placeholderSquares.length;\n    }\n\n    get cols() {\n        return this.#columns;\n    }\n    set cols(value) {\n        if (value != this.#columns) {\n            this.#columns = value;\n            this.#rebalance();\n        }\n    }\n\n    get rows(): number {\n        return this.squares / this.cols;\n    }\n\n    #addSquare() {\n        let a = document.createElement('a');\n        let title = document.createElement('div');\n        let desc = document.createElement('div');\n        let colhex = document.createElement('span');\n        \n        title.classList.add('title');\n        desc.classList.add('desc');\n        colhex.classList.add('colhex');\n        \n        a.appendChild(title);\n        a.appendChild(desc);\n        a.appendChild(colhex);\n        a.addEventListener(\"click\", this.regenColors.bind(this, false));\n    \n        wrapper.appendChild(a);\n        this.placeholderSquares.push(a);\n    }\n\n    #removeSquare() {\n        this.placeholderSquares.pop()?.remove();\n    }\n\n    #rebalance() {\n        let squares = this.squares;\n        // n = number of squares that should be on board\n        let n = Math.max(this.#columns * SquareTracker.#MIN_ROWS, this.projectSquares.length);\n        n = Math.ceil(n / this.#columns) * this.#columns;\n\n        if (squares == n) return;\n        if (squares > n) {\n            for (let i = squares; i > n; i--) {\n                this.#removeSquare();\n            }\n        } else if (squares < n) {\n            for (let i = squares; i < n; i++) {\n                this.#addSquare();\n            }\n        }\n\n        this.regenColors(true);\n    }\n\n    forEach(callback: (value: HTMLElement, index: number) => void) {\n        let i = 0;\n        for (let e of this.projectSquares) callback(e, i++);\n        for (let e of this.placeholderSquares) callback(e, i++);\n    }\n\n    regenColors(useCurrentCorners: boolean = false) {\n        if (!useCurrentCorners) this.corners = Array.from({length: 4}, () => randRGB(0x50)) as [RGB, RGB, RGB, RGB];\n        let corners = this.corners;\n        \n        if (this.#columns < 3) {\n            // use TL + BR boxes rather than the corners to make a consistent grid (rather than 2 columns of color)\n            let corners2: [RGB, RGB] = [corners[2], corners[1]];\n            this.assignColors(i => interpolate2(corners2, asCoord(i)), useCurrentCorners);\n        } else {\n            this.assignColors(i => interpolate4(corners, asNormCoord(i)), useCurrentCorners);\n        }\n\n    }\n\n    assignColors(callback: (cellIndex: number) => RGB, skipTransition = false) {\n        squares.forEach((s, i) => {\n            let clr = callback(i);\n            if (skipTransition) {\n                s.classList.add(\"no-transition\");\n                s.offsetHeight;\n            }\n            s.style.backgroundColor = hex(clr);\n    \n            s.querySelector('.colhex')!.textContent = hex(clr);\n        });\n\n        if (skipTransition) {\n            // return transition after color change\n            requestAnimationFrame(() => { // this is called before update\n                requestAnimationFrame(() => { // this is called after update\n                    squares.forEach(s => {\n                        s.classList.remove(\"no-transition\");\n                    });\n                });\n            });\n        }\n    }\n\n}\nlet squares = new SquareTracker();\nsquares.regenColors();\n\nwindow.addEventListener(\"resize\", e => {\n    squares.cols = +getComputedStyle(wrapper).getPropertyValue('--cols');\n})\nfunction asCoord(i: number): Coord {\n    // takes an index in the array, maps it to its [row, col] value\n    return [Math.floor(i / squares.cols), i % squares.cols];\n}\nfunction asNormCoord(i: number): NormCoord {\n    // takes an index in the array, maps it to its NormCoord value\n    let [r, c] = asCoord(i);\n    return [r / (squares.rows - 1), c / (squares.cols - 1)];\n}\n\nfunction randInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nfunction randRGB(min = 0, max = 256): RGB {\n    // [min, max)\n    return Array.from({length: 3}, () => randInt(min, max)) as RGB;\n}\nfunction hex(arr: RGB) {\n    // converts rgb array => hex notation\n    return `#${arr.map(x => Math.round(x).toString(16).padStart(2, \"0\")).join('')}`\n}\n\nfunction zip<A extends any[]>(...v: {[I in keyof A]: A[I][]}): A[] {\n    let length = v[0].length;\n    return Array.from({length}, (_, i) => v.map(a => a[i]) as A);\n}\n\nfunction lerp<T extends number[]>(pts: [T, T], dist: number): T {\n    let [p, q] = pts;\n    let length = p.length;\n    return Array.from({length}, (_, i) => {\n        let a = p[i], b = q[i];\n        return a + dist * (b - a);\n    }) as T;\n}\n\nfunction bilerp<T extends number[]>(pts: [T, T, T, T], c: NormCoord): T {\n    type ArrPair = [T, T];\n    let [px, py] = c;\n    let [top, bottom] = [pts.slice(0, 2) as ArrPair, pts.slice(2, 4) as ArrPair]\n    return lerp([lerp(bottom, px), lerp(top, px)], py);\n}\n\n// interpolate given that each corner is assigned a color\nfunction interpolate4(clrs: [RGB, RGB, RGB, RGB], c: NormCoord) {\n    // weight = how much each of the 4 points are valued based on the distance point c is from the corner\n    let weights = bilerp<[number, number, number, number]>([\n        [1,0,0,0],\n        [0,1,0,0],\n        [0,0,1,0],\n        [0,0,0,1]\n    ], c);\n\n    return Array.from({length: 3}, (_, i) => {\n        let channels = clrs.map(clr => clr[i]);\n\n        let sqsum = zip(channels, weights)\n            .map(([c, w]) => w * c * c)\n            .reduce((acc, cv) => acc + cv);\n        \n        return Math.round(Math.sqrt(sqsum));\n    }) as RGB;\n}\n\nfunction manhattan(p: Coord, q: Coord): number {\n    return zip(p, q)\n        .map(([px, qx]) => Math.abs(px - qx))\n        .reduce((acc, cv) => acc + cv);\n}\n\n// interpolate given that the top left and bottom right are assigned colors\nfunction interpolate2(clrs: [RGB, RGB], c: Coord) {\n    // weight = how much each of the 2 points are valued based on the distance point c is from the corner\n    let [aw, bw] = [\n        manhattan([0, 0], c),\n        manhattan([squares.rows - 1, squares.cols - 1], c),\n    ];\n    let weights = [\n        bw / (aw + bw), // note, flipped\n        aw / (aw + bw)\n    ];\n\n    return Array.from({length: 3}, (_, i) => {\n        let channels = clrs.map(clr => clr[i]);\n\n        let sqsum = zip(channels, weights)\n            .map(([c, w]) => w * c * c)\n            .reduce((acc, cv) => acc + cv);\n        \n        return Math.round(Math.sqrt(sqsum));\n    }) as RGB;\n}\n\nexport {}; // recognize as module","import _checkPrivateRedeclaration from \"./_check_private_redeclaration\";\n\nexport default function _classPrivateFieldInit(obj, privateMap, value) {\n  _checkPrivateRedeclaration(obj, privateMap);\n  privateMap.set(obj, value);\n}\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n"],"names":["$3acbf2481cd9b366$export$2e2bcd8739ae039","receiver","privateMap","action","has","TypeError","get","$350ce51761dbedae$export$2e2bcd8739ae039","descriptor","call","value","$b3478b8924d1bc1b$export$2e2bcd8739ae039","$116cbfb74626cc77$export$2e2bcd8739ae039","obj","privateCollection","$f0843caf9b981abc$export$2e2bcd8739ae039","set","writable","$f14df8e35bde1da9$export$2e2bcd8739ae039","$2d6f6876a65103da$export$2e2bcd8739ae039","privateSet","fn","$b4e1d820bc464171$export$2e2bcd8739ae039","add","$48eccaa769e5f6ce$export$2e2bcd8739ae039","classConstructor","$68eb0cd5f3bb2dc6$export$2e2bcd8739ae039","$d05d6add4b7bc7a0$var$wrapper","document","querySelector","_columns","WeakMap","_addSquare","WeakSet","_removeSquare","_rebalance","$d05d6add4b7bc7a0$var$SquareTracker","squares","this","projectSquares","length","placeholderSquares","cols","rebalance","rows","forEach","callback","i","e","e1","regenColors","useCurrentCorners","corners","Array","from","min","max","Math","floor","random","$d05d6add4b7bc7a0$var$randInt","$d05d6add4b7bc7a0$var$randRGB","corners2","assignColors","clrs","c2","aw","bw","$d05d6add4b7bc7a0$var$manhattan","$d05d6add4b7bc7a0$var$squares","weights","_","sqsum","$d05d6add4b7bc7a0$var$zip","map","clr","c","w","reduce","acc","cv","round","sqrt","$d05d6add4b7bc7a0$var$interpolate2","$d05d6add4b7bc7a0$var$asCoord","c1","pts","px","py","top","bottom","slice","$d05d6add4b7bc7a0$var$lerp","$d05d6add4b7bc7a0$var$bilerp","$d05d6add4b7bc7a0$var$interpolate4","r","$d05d6add4b7bc7a0$var$asNormCoord","skipTransition","s","classList","offsetHeight","style","backgroundColor","$d05d6add4b7bc7a0$var$hex","textContent","requestAnimationFrame","remove","constructor","key","Object","defineProperty","enumerable","configurable","$0a04bf84c37cb7e4$export$2e2bcd8739ae039","getComputedStyle","getPropertyValue","querySelectorAll","span","createElement","appendChild","_MIN_ROWS","addSquare","a","title","desc","colhex","addEventListener","bind","push","removeSquare","pop","n","ceil","i1","arr","x","toString","padStart","join","v","dist","p","q","b","qx","abs","window"],"version":3,"file":"index.420fc066.js.map"}