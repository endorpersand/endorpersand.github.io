{"mappings":"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","sources":["src/gradient/gradient.ts"],"sourcesContent":["declare var OffscreenCanvas: any;\n\ntype IpolType = \"lin\" | \"rms\";\n\nconst linCanvas = document.querySelector<HTMLCanvasElement>('#lin-result canvas')!;\nconst lctx = linCanvas.getContext('2d', {alpha: false})!;\nconst rmsCanvas = document.querySelector<HTMLCanvasElement>('#rms-result canvas')!;\nconst rctx = rmsCanvas.getContext('2d', {alpha: false})!;\nconst cssCanvas = document.querySelector<HTMLDivElement>(\"#css-result div#css-gradient\")!;\n\nconst coloradd = document.querySelector<HTMLButtonElement>('button#coloradd')!;\nconst colorsWrapper = document.querySelector<HTMLDivElement>('div#colors')!;\n\nconst gammaInput = document.querySelector<HTMLInputElement>(\"input#gamma-input\")!;\n\nconst DEFAULT_GAMMA = 2.2;\ntype RGB = [r: number, g: number, b: number];\n\n/**\n * Computes the input gamma.\n */\nfunction gamma() {\n    if (!gammaInput.checkValidity() || gammaInput.value === \"\") {\n        gammaInput.value = \"\" + DEFAULT_GAMMA;\n    }\n    \n    return +gammaInput.value;\n}\n\nupdateAll();\ndocument.querySelectorAll('input[type=color]').forEach(x => x.addEventListener('change', updateAll));\ngammaInput.addEventListener(\"input\", updateAll);\n\n/**\n * Add another color stop to the display. This automatically inserts the color input to DOM.\n * @param update Whether or not the gradients should be refreshed.\n * @returns the color stop element\n */\nfunction addColorInput(update = true) {\n    let div = makeColorDiv();\n    colorsWrapper.insertBefore(div, coloradd);\n\n    let buts = colorRMButtons();\n    if (buts.length > 2) {\n        for (let b of buts) {\n            b.disabled = false;\n        }\n    }\n    if (update) updateAll();\n    return div;\n}\ncoloradd.addEventListener('click', () => {\n    addColorInput(true);\n})\n\ndocument.querySelectorAll('.colorrm').forEach(e => e.addEventListener('click', () => {\n    colorsWrapper.removeChild(e.parentElement!);\n    let buts = colorRMButtons();\n    if (buts.length < 3) {\n        for (let b of buts) b.disabled = true;\n    }\n    updateAll();\n}))\n\n/**\n * @returns the input colors as hex strings\n */\nfunction getColors() {\n    let cinputs =  document.querySelectorAll<HTMLInputElement>('input[type=color]');\n    return Array.from(cinputs, e => e.value);\n}\n\n/**\n * Takes a hex string and converts it into an RGB array\n * @param hex hex string\n * @returns RGB array\n */\nfunction rgb(hex: string): RGB {\n    return [hex.slice(1,3), hex.slice(3,5), hex.slice(5,7)].map(x => parseInt(x, 16)) as RGB;\n}\n\n/**\n * @returns every color input <div>\n */\n function colorInput() {\n    return colorsWrapper.querySelectorAll('div');\n}\n/**\n * @returns every color \"remove\" button\n */\nfunction colorRMButtons() {\n    return document.querySelectorAll<HTMLButtonElement>('button.colorrm');\n}\n\n/**\n * Creates a color input div\n * @param hex Initial color of the div\n * @returns the div\n */\nfunction makeColorDiv(hex = '#000000') {\n    let div = document.createElement('div');\n\n    let clr = document.createElement('input');\n    clr.type = 'color';\n    clr.value = hex;\n    clr.addEventListener('change', updateAll);\n\n    let button = document.createElement('button');\n    button.classList.add('colorrm');\n    button.textContent = 'x';\n    button.addEventListener('click', () => {\n        colorsWrapper.removeChild(div);\n\n        let buts = colorRMButtons();\n        if (buts.length < 3) {\n            for (let b of buts) {\n                b.disabled = true;\n            }\n        }\n\n        updateAll();\n    });\n        \n    div.append(clr, button);\n    return div;\n}\n\n/**\n * Interpolates from one number to another using root-mean-square (the end points are squared, averaged, then the mean is rooted).\n * @param a endpoint\n * @param b endpoint\n * @param prog [0, 1)\n * @returns interpolated value\n */\nfunction gammaInterpolate(a: number, b: number, gamma: number, prog: number) {\n    return ((1 - prog) * (a ** gamma) + prog * (b ** gamma)) ** (1 / gamma);\n}\n\n/**\n * Update all result canvases\n */\nfunction updateAll() {\n    const clrs = getColors();\n\n    cssCanvas.style.background = `linear-gradient(0.25turn, ${clrs.join(\", \")})`;\n    updateCanvas(lctx, \"lin\", clrs);\n    updateCanvas(rctx, \"rms\", clrs);\n}\n\n/**\n * Update a canvas using a specified interpolation type and array of colors\n * @param ctx the canvas's rendering context\n * @param ipol interpolation type\n * @param clrs array of colors to update the canvas with\n */\nfunction updateCanvas(ctx: CanvasRenderingContext2D, ipol: IpolType, clrs: string[]) {\n    const lastIndex = clrs.length - 1;\n    const canvas = ctx.canvas;\n\n    if (ipol === \"lin\") {\n        const grad = ctx.createLinearGradient(0, 0, canvas.width, 0);\n\n        for (var [i, c] of clrs.entries()) {\n            grad.addColorStop(i / lastIndex, c);\n        }\n        ctx.fillStyle = grad;\n    } else if (ipol === \"rms\") {\n        let ocanvas: HTMLCanvasElement;\n        if (\"OffscreenCanvas\" in globalThis) {\n            ocanvas = new OffscreenCanvas(canvas.width, 1);\n        } else {\n            ocanvas = document.createElement('canvas');\n            [ocanvas.width, ocanvas.height] = [canvas.width, 1];\n        }\n        const octx = ocanvas.getContext('2d')!;\n    \n        const dat = octx.createImageData(ocanvas.width, 1);\n        const arr32 = new Uint32Array(dat.data.buffer);\n        const arr32LastIndex = arr32.length - 1;\n        for (var i = 0; i < arr32.length; i++) {\n            const pos = (i / arr32LastIndex) * lastIndex;\n            const [j, prog] = [Math.floor(pos), pos % 1];\n            const [a, b] = [clrs[j], clrs[j + 1] ?? '#000000'].map(x => rgb(x));\n            const c = Array.from({length: 3}, (_, i) => gammaInterpolate(a[i], b[i], gamma(), prog));\n            arr32[i] = 0xFF << 24\n                     | c[2] << 16\n                     | c[1] <<  8\n                     | c[0] <<  0;\n        }\n        octx.putImageData(dat, 0, 0);\n        const pat = ctx.createPattern(ocanvas, 'repeat-y')!;\n        ctx.fillStyle = pat;\n    } else {\n        let _: never = ipol;\n    }\n\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n}\n\ndeclare global {\n    interface Window {\n        setColors(...clrs: string[]): void;\n        gay(): void;\n    }\n}\n\nfunction setColors(...clrs: string[]) {\n    let inputs = [...colorInput()];\n\n    if (clrs.length < 2) throw new Error(\"Two colors are required for a gradient\");\n\n    while (clrs.length < inputs.length) {\n        inputs.pop()?.remove();\n    }\n    while (inputs.length < clrs.length) {\n        inputs.push(addColorInput(false));\n    }\n\n    inputs.forEach((div, i) => {\n        const input = div.querySelector<HTMLInputElement>(\"input[type=color]\")!;\n        const clr = clrs[i];\n\n        input.value = clr;\n    });\n\n    updateAll();\n}\nwindow.setColors = setColors;\n\nfunction gay() {\n    setColors(\n        \"#FF0000\",\n        \"#FFFF00\",\n        \"#00FF00\",\n        \"#00FFFF\",\n        \"#0000FF\",\n        \"#FF00FF\",\n        \"#FF0000\"\n    );\n}\nwindow.gay = gay;\n\nexport {};"],"names":["$d246116f12813c68$var$lctx","document","querySelector","getContext","alpha","$d246116f12813c68$var$rctx","$d246116f12813c68$var$cssCanvas","$d246116f12813c68$var$coloradd","$d246116f12813c68$var$colorsWrapper","$d246116f12813c68$var$gammaInput","$d246116f12813c68$var$addColorInput","update","div","hex","createElement","clr","type","value","addEventListener","$d246116f12813c68$var$updateAll","button","classList","add","textContent","removeChild","buts","$d246116f12813c68$var$colorRMButtons","length","b","disabled","append","$d246116f12813c68$var$makeColorDiv","insertBefore","querySelectorAll","$d246116f12813c68$var$gammaInterpolate","a","gamma1","prog","clrs","cinputs","Array","from","e","$d246116f12813c68$var$getColors","style","background","join","$d246116f12813c68$var$updateCanvas","ctx","ipol","lastIndex","canvas","grad","createLinearGradient","width","i1","c","entries","addColorStop","fillStyle","ocanvas","globalThis","OffscreenCanvas","height","octx","dat","createImageData","arr32","Uint32Array","data","buffer","arr32LastIndex","pos","j","Math","floor","map","x","$d246116f12813c68$var$rgb","slice","parseInt","_","i","checkValidity","putImageData","pat","createPattern","fillRect","$d246116f12813c68$var$setColors","inputs","Error","pop","remove","push","forEach","input","parentElement","window","setColors","gay"],"version":3,"file":"gradient.9187e1ed.js.map"}