{"mappings":"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","sources":["src/index/boxes.ts"],"sourcesContent":["type Coord = [number, number]; // each cell is 1 unit\ntype NormCoord = [number, number]; // the entire wrapper 1 unit\ntype RGB = [number, number, number];\n\nlet wrapper = document.querySelector('.wrapper')!;\n\nclass SquareTracker {\n    static #MIN_ROWS = 3;\n    #cols: number;\n    readonly projectSquares: HTMLElement[];\n    placeholderSquares: HTMLElement[];\n\n    constructor() {\n        this.#cols = +getComputedStyle(wrapper).getPropertyValue('--cols');\n\n        this.projectSquares = [...wrapper.querySelectorAll('a')];\n        for (let s of this.projectSquares) {\n            let span = document.createElement('span');\n            span.classList.add('colhex');\n            s.appendChild(span);\n        }\n\n        this.placeholderSquares = [];\n        for (let i = this.squares; i < (this.cols * SquareTracker.#MIN_ROWS); i++) {\n            this.#addSquare();\n        }\n    }\n\n    get squares() {\n        return this.projectSquares.length + this.placeholderSquares.length;\n    }\n\n    get cols() {\n        return this.#cols;\n    }\n    set cols(value) {\n        if (value != this.#cols) {\n            this.#cols = value;\n            this.#rebalance();\n        }\n    }\n\n    get rows(): number {\n        return this.squares / this.cols;\n    }\n\n    #addSquare() {\n        let a = document.createElement('a');\n        let title = document.createElement('div');\n        let desc = document.createElement('div');\n        let colhex = document.createElement('span');\n        \n        title.classList.add('title');\n        desc.classList.add('desc');\n        colhex.classList.add('colhex');\n        \n        a.appendChild(title);\n        a.appendChild(desc);\n        a.appendChild(colhex);\n        a.addEventListener(\"click\", this.regenColors.bind(this));\n    \n        wrapper.appendChild(a);\n        this.placeholderSquares.push(a);\n    }\n\n    #removeSquare() {\n        this.placeholderSquares.pop()?.remove();\n    }\n\n    #rebalance() {\n        let squares = this.squares;\n        // n = number of squares that should be on board\n        let n = Math.max(this.#cols * SquareTracker.#MIN_ROWS, this.projectSquares.length);\n        n = Math.ceil(n / this.#cols) * this.#cols;\n\n        if (squares == n) return;\n        if (squares > n) {\n            for (let i = squares; i > n; i--) {\n                this.#removeSquare();\n            }\n        } else if (squares < n) {\n            for (let i = squares; i < n; i++) {\n                this.#addSquare();\n            }\n        }\n\n        this.regenColors();\n    }\n\n    forEach(callback: (value: HTMLElement, index: number) => void) {\n        let i = 0;\n        for (let e of this.projectSquares) callback(e, i++);\n        for (let e of this.placeholderSquares) callback(e, i++);\n    }\n\n    regenColors() {\n        if (this.#cols < 3) {\n            let corners = Array.from({length: 2}, () => randRGB(0x50)) as [RGB, RGB];\n            this.assignColors(i => interpolate2(corners, asCoord(i)));\n        } else {\n            let corners = Array.from({length: 4}, () => randRGB(0x50)) as [RGB, RGB, RGB, RGB];\n            this.assignColors(i => interpolate4(corners, asNormCoord(i)));\n        }\n    }\n\n    assignColors(callback: (cellIndex: number) => RGB) {\n        squares.forEach((s, i) => {\n            let clr = callback(i);\n            s.style.backgroundColor = hex(clr);\n    \n            s.querySelector('.colhex')!.textContent = hex(clr);\n        });\n    }\n\n}\nlet squares = new SquareTracker();\nsquares.regenColors();\n\nwindow.addEventListener(\"resize\", e => {\n    squares.cols = +getComputedStyle(wrapper).getPropertyValue('--cols');\n})\nfunction asCoord(i: number): Coord {\n    // takes an index in the array, maps it to its [row, col] value\n    return [Math.floor(i / squares.cols), i % squares.cols];\n}\nfunction asNormCoord(i: number): NormCoord {\n    // takes an index in the array, maps it to its NormCoord value\n    let [r, c] = asCoord(i);\n    return [r / (squares.rows - 1), c / (squares.cols - 1)];\n}\n\nfunction randInt(min: number, max: number) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nfunction randRGB(min = 0, max = 256): RGB {\n    // [min, max)\n    return Array.from({length: 3}, () => randInt(min, max)) as RGB;\n}\nfunction hex(arr: RGB) {\n    // converts rgb array => hex notation\n    return `#${arr.map(x => Math.round(x).toString(16).padStart(2, \"0\")).join('')}`\n}\n\nfunction zip<A extends any[]>(...v: {[I in keyof A]: A[I][]}): A[] {\n    let length = v[0].length;\n    return Array.from({length}, (_, i) => v.map(a => a[i]) as A);\n}\n\nfunction lerp<T extends number[]>(pts: [T, T], dist: number): T {\n    let [p, q] = pts;\n    let length = p.length;\n    return Array.from({length}, (_, i) => {\n        let a = p[i], b = q[i];\n        return a + dist * (b - a);\n    }) as T;\n}\n\nfunction bilerp<T extends number[]>(pts: [T, T, T, T], c: NormCoord): T {\n    type ArrPair = [T, T];\n    let [px, py] = c;\n    let [top, bottom] = [pts.slice(0, 2) as ArrPair, pts.slice(2, 4) as ArrPair]\n    return lerp([lerp(bottom, px), lerp(top, px)], py);\n}\n\n// interpolate given that each corner is assigned a color\nfunction interpolate4(clrs: [RGB, RGB, RGB, RGB], c: NormCoord) {\n    // weight = how much each of the 4 points are valued based on the distance point c is from the corner\n    let weights = bilerp<[number, number, number, number]>([\n        [1,0,0,0],\n        [0,1,0,0],\n        [0,0,1,0],\n        [0,0,0,1]\n    ], c);\n\n    return Array.from({length: 3}, (_, i) => {\n        let channels = clrs.map(clr => clr[i]);\n\n        let sqsum = zip(channels, weights)\n            .map(([c, w]) => w * c * c)\n            .reduce((acc, cv) => acc + cv);\n        \n        return Math.round(Math.sqrt(sqsum));\n    }) as RGB;\n}\n\nfunction manhattan(p: Coord, q: Coord): number {\n    return zip(p, q)\n        .map(([px, qx]) => Math.abs(px - qx))\n        .reduce((acc, cv) => acc + cv);\n}\n\n// interpolate given that the top left and bottom right are assigned colors\nfunction interpolate2(clrs: [RGB, RGB], c: Coord) {\n    // weight = how much each of the 2 points are valued based on the distance point c is from the corner\n    let [aw, bw] = [\n        manhattan([0, 0], c),\n        manhattan([squares.rows - 1, squares.cols - 1], c),\n    ];\n    let weights = [\n        bw / (aw + bw), // note, flipped\n        aw / (aw + bw)\n    ];\n\n    return Array.from({length: 3}, (_, i) => {\n        let channels = clrs.map(clr => clr[i]);\n\n        let sqsum = zip(channels, weights)\n            .map(([c, w]) => w * c * c)\n            .reduce((acc, cv) => acc + cv);\n        \n        return Math.round(Math.sqrt(sqsum));\n    }) as RGB;\n}\n\nexport {}; // recognize as module"],"names":["$7uoCD","parcelRequire","$b2ecc1262834a993$var$wrapper","document","querySelector","_cols","WeakMap","_addSquare","WeakSet","_removeSquare","_rebalance","$b2ecc1262834a993$var$SquareTracker","classPrivateMethodInit","this","classPrivateFieldInit","getComputedStyle","getPropertyValue","projectSquares","toConsumableArray","querySelectorAll","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","s","value","span","createElement","classList","add","appendChild","err","return","placeholderSquares","i","squares","cols","classStaticPrivateFieldSpecGet","_MIN_ROWS","classPrivateMethodGet","addSquare","call","key","length","classPrivateFieldGet","rebalance","callback","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","corners","Array","from","$b2ecc1262834a993$var$randRGB","assignColors","clrs","c","$b2ecc1262834a993$var$asCoord","ref","$b2ecc1262834a993$var$manhattan","$b2ecc1262834a993$var$squares","rows","aw","bw","weights","_","sqsum","$b2ecc1262834a993$var$zip","map","clr","param","_$c","_param","reduce","acc","cv","Math","round","sqrt","corners1","slicedToArray","r","$b2ecc1262834a993$var$asNormCoord","pts","_c","px","py","slice","top","$b2ecc1262834a993$var$lerp","$b2ecc1262834a993$var$bilerp","forEach","style","backgroundColor","$b2ecc1262834a993$var$hex","textContent","a","title","desc","colhex","addEventListener","regenColors","bind","push","removeSquare","pop","remove","n","max","ceil","i1","floor","$b2ecc1262834a993$var$randInt","min","random","arguments","arr","concat","x","toString","padStart","join","_len","v","_key","dist","_pts","p","q","b","qx","abs","window","e"],"version":3,"file":"index.b836f938.js.map"}